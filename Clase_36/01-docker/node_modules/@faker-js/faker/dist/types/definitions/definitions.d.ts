import type { AddressDefinitions } from '@faker-js/faker/definitions/address';
import type { AnimalDefinitions } from '@faker-js/faker/definitions/animal';
import type { ColorDefinitions } from '@faker-js/faker/definitions/color';
import type { CommerceDefinitions } from '@faker-js/faker/definitions/commerce';
import type { CompanyDefinitions } from '@faker-js/faker/definitions/company';
import type { DatabaseDefinitions } from '@faker-js/faker/definitions/database';
import type { DateDefinitions } from '@faker-js/faker/definitions/date';
import type { FinanceDefinitions } from '@faker-js/faker/definitions/finance';
import type { HackerDefinitions } from '@faker-js/faker/definitions/hacker';
import type { InternetDefinitions } from '@faker-js/faker/definitions/internet';
import type { LoremDefinitions } from '@faker-js/faker/definitions/lorem';
import type { MusicDefinitions } from '@faker-js/faker/definitions/music';
import type { NameDefinitions } from '@faker-js/faker/definitions/name';
import type { PhoneNumberDefinitions } from '@faker-js/faker/definitions/phone_number';
import type { ScienceDefinitions } from '@faker-js/faker/definitions/science';
import type { SystemDefinitions } from '@faker-js/faker/definitions/system';
import type { VehicleDefinitions } from '@faker-js/faker/definitions/vehicle';
import type { WordDefinitions } from '@faker-js/faker/definitions/word';
export declare type LocaleEntry<T> = Partial<T> & Record<string, any>;
/**
 * The definitions as used by the Faker modules.
 */
export interface Definitions {
    address: AddressDefinitions;
    animal: AnimalDefinitions;
    color: ColorDefinitions;
    commerce: CommerceDefinitions;
    company: CompanyDefinitions;
    database: DatabaseDefinitions;
    date: DateDefinitions;
    finance: FinanceDefinitions;
    hacker: HackerDefinitions;
    internet: InternetDefinitions;
    lorem: LoremDefinitions;
    music: MusicDefinitions;
    name: NameDefinitions;
    phone_number: PhoneNumberDefinitions;
    science: ScienceDefinitions;
    system: SystemDefinitions;
    vehicle: VehicleDefinitions;
    word: WordDefinitions;
}
/**
 * The definitions as used by the translations/locales.
 * This is basically the same as Definitions with the exception,
 * that most properties are optional and extra properties are allowed.
 */
export declare type LocaleDefinition = {
    /**
     * The name of the language.
     */
    title: string;
    separator?: string;
} & LocaleEntry<Definitions>;
