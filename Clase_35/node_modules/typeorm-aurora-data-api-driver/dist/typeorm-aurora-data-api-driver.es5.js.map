{"version":3,"file":"typeorm-aurora-data-api-driver.es5.js","sources":["../node_modules/sqlstring/lib/SqlString.js","../node_modules/sqlstring/index.js","../node_modules/data-api-client/index.js","../src/utils/transform.utils.ts","../src/query-transformer/query-transformer.ts","../src/query-transformer/mysql-query-transformer.ts","../src/query-transformer/postgres-query-transformer.ts","../src/typeorm-aurora-data-api-driver.ts"],"sourcesContent":["var SqlString  = exports;\n\nvar ID_GLOBAL_REGEXP    = /`/g;\nvar QUAL_GLOBAL_REGEXP  = /\\./g;\nvar CHARS_GLOBAL_REGEXP = /[\\0\\b\\t\\n\\r\\x1a\\\"\\'\\\\]/g; // eslint-disable-line no-control-regex\nvar CHARS_ESCAPE_MAP    = {\n  '\\0'   : '\\\\0',\n  '\\b'   : '\\\\b',\n  '\\t'   : '\\\\t',\n  '\\n'   : '\\\\n',\n  '\\r'   : '\\\\r',\n  '\\x1a' : '\\\\Z',\n  '\"'    : '\\\\\"',\n  '\\''   : '\\\\\\'',\n  '\\\\'   : '\\\\\\\\'\n};\n\nSqlString.escapeId = function escapeId(val, forbidQualified) {\n  if (Array.isArray(val)) {\n    var sql = '';\n\n    for (var i = 0; i < val.length; i++) {\n      sql += (i === 0 ? '' : ', ') + SqlString.escapeId(val[i], forbidQualified);\n    }\n\n    return sql;\n  } else if (forbidQualified) {\n    return '`' + String(val).replace(ID_GLOBAL_REGEXP, '``') + '`';\n  } else {\n    return '`' + String(val).replace(ID_GLOBAL_REGEXP, '``').replace(QUAL_GLOBAL_REGEXP, '`.`') + '`';\n  }\n};\n\nSqlString.escape = function escape(val, stringifyObjects, timeZone) {\n  if (val === undefined || val === null) {\n    return 'NULL';\n  }\n\n  switch (typeof val) {\n    case 'boolean': return (val) ? 'true' : 'false';\n    case 'number': return val + '';\n    case 'object':\n      if (val instanceof Date) {\n        return SqlString.dateToString(val, timeZone || 'local');\n      } else if (Array.isArray(val)) {\n        return SqlString.arrayToList(val, timeZone);\n      } else if (Buffer.isBuffer(val)) {\n        return SqlString.bufferToString(val);\n      } else if (typeof val.toSqlString === 'function') {\n        return String(val.toSqlString());\n      } else if (stringifyObjects) {\n        return escapeString(val.toString());\n      } else {\n        return SqlString.objectToValues(val, timeZone);\n      }\n    default: return escapeString(val);\n  }\n};\n\nSqlString.arrayToList = function arrayToList(array, timeZone) {\n  var sql = '';\n\n  for (var i = 0; i < array.length; i++) {\n    var val = array[i];\n\n    if (Array.isArray(val)) {\n      sql += (i === 0 ? '' : ', ') + '(' + SqlString.arrayToList(val, timeZone) + ')';\n    } else {\n      sql += (i === 0 ? '' : ', ') + SqlString.escape(val, true, timeZone);\n    }\n  }\n\n  return sql;\n};\n\nSqlString.format = function format(sql, values, stringifyObjects, timeZone) {\n  if (values == null) {\n    return sql;\n  }\n\n  if (!Array.isArray(values)) {\n    values = [values];\n  }\n\n  var chunkIndex        = 0;\n  var placeholdersRegex = /\\?+/g;\n  var result            = '';\n  var valuesIndex       = 0;\n  var match;\n\n  while (valuesIndex < values.length && (match = placeholdersRegex.exec(sql))) {\n    var len = match[0].length;\n\n    if (len > 2) {\n      continue;\n    }\n\n    var value = len === 2\n      ? SqlString.escapeId(values[valuesIndex])\n      : SqlString.escape(values[valuesIndex], stringifyObjects, timeZone);\n\n    result += sql.slice(chunkIndex, match.index) + value;\n    chunkIndex = placeholdersRegex.lastIndex;\n    valuesIndex++;\n  }\n\n  if (chunkIndex === 0) {\n    // Nothing was replaced\n    return sql;\n  }\n\n  if (chunkIndex < sql.length) {\n    return result + sql.slice(chunkIndex);\n  }\n\n  return result;\n};\n\nSqlString.dateToString = function dateToString(date, timeZone) {\n  var dt = new Date(date);\n\n  if (isNaN(dt.getTime())) {\n    return 'NULL';\n  }\n\n  var year;\n  var month;\n  var day;\n  var hour;\n  var minute;\n  var second;\n  var millisecond;\n\n  if (timeZone === 'local') {\n    year        = dt.getFullYear();\n    month       = dt.getMonth() + 1;\n    day         = dt.getDate();\n    hour        = dt.getHours();\n    minute      = dt.getMinutes();\n    second      = dt.getSeconds();\n    millisecond = dt.getMilliseconds();\n  } else {\n    var tz = convertTimezone(timeZone);\n\n    if (tz !== false && tz !== 0) {\n      dt.setTime(dt.getTime() + (tz * 60000));\n    }\n\n    year       = dt.getUTCFullYear();\n    month       = dt.getUTCMonth() + 1;\n    day         = dt.getUTCDate();\n    hour        = dt.getUTCHours();\n    minute      = dt.getUTCMinutes();\n    second      = dt.getUTCSeconds();\n    millisecond = dt.getUTCMilliseconds();\n  }\n\n  // YYYY-MM-DD HH:mm:ss.mmm\n  var str = zeroPad(year, 4) + '-' + zeroPad(month, 2) + '-' + zeroPad(day, 2) + ' ' +\n    zeroPad(hour, 2) + ':' + zeroPad(minute, 2) + ':' + zeroPad(second, 2) + '.' +\n    zeroPad(millisecond, 3);\n\n  return escapeString(str);\n};\n\nSqlString.bufferToString = function bufferToString(buffer) {\n  return 'X' + escapeString(buffer.toString('hex'));\n};\n\nSqlString.objectToValues = function objectToValues(object, timeZone) {\n  var sql = '';\n\n  for (var key in object) {\n    var val = object[key];\n\n    if (typeof val === 'function') {\n      continue;\n    }\n\n    sql += (sql.length === 0 ? '' : ', ') + SqlString.escapeId(key) + ' = ' + SqlString.escape(val, true, timeZone);\n  }\n\n  return sql;\n};\n\nSqlString.raw = function raw(sql) {\n  if (typeof sql !== 'string') {\n    throw new TypeError('argument sql must be a string');\n  }\n\n  return {\n    toSqlString: function toSqlString() { return sql; }\n  };\n};\n\nfunction escapeString(val) {\n  var chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex = 0;\n  var escapedVal = '';\n  var match;\n\n  while ((match = CHARS_GLOBAL_REGEXP.exec(val))) {\n    escapedVal += val.slice(chunkIndex, match.index) + CHARS_ESCAPE_MAP[match[0]];\n    chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex;\n  }\n\n  if (chunkIndex === 0) {\n    // Nothing was escaped\n    return \"'\" + val + \"'\";\n  }\n\n  if (chunkIndex < val.length) {\n    return \"'\" + escapedVal + val.slice(chunkIndex) + \"'\";\n  }\n\n  return \"'\" + escapedVal + \"'\";\n}\n\nfunction zeroPad(number, length) {\n  number = number.toString();\n  while (number.length < length) {\n    number = '0' + number;\n  }\n\n  return number;\n}\n\nfunction convertTimezone(tz) {\n  if (tz === 'Z') {\n    return 0;\n  }\n\n  var m = tz.match(/([\\+\\-\\s])(\\d\\d):?(\\d\\d)?/);\n  if (m) {\n    return (m[1] === '-' ? -1 : 1) * (parseInt(m[2], 10) + ((m[3] ? parseInt(m[3], 10) : 0) / 60)) * 60;\n  }\n  return false;\n}\n","module.exports = require('./lib/SqlString');\n","'use strict'\n\n/*\n * This module provides a simplified interface into the Aurora Serverless\n * Data API by abstracting away the notion of field values.\n *\n * More detail regarding the Aurora Serverless Data APIcan be found here:\n * https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html\n *\n * @author Jeremy Daly <jeremy@jeremydaly.com>\n * @version 1.2.0\n * @license MIT\n */\n\n// Require the aws-sdk. This is a dev dependency, so if being used\n// outside of a Lambda execution environment, it must be manually installed.\nconst AWS = require('aws-sdk')\n\n// Require sqlstring to add additional escaping capabilities\nconst sqlString = require('sqlstring')\n\n// Supported value types in the Data API\nconst supportedTypes = [\n  'arrayValue',\n  'blobValue',\n  'booleanValue',\n  'doubleValue',\n  'isNull',\n  'longValue',\n  'stringValue',\n  'structValue'\n]\n\n/********************************************************************/\n/**  PRIVATE METHODS                                               **/\n/********************************************************************/\n\n// Simple error function\nconst error = (...err) => {\n  throw Error(...err)\n}\n\n// Parse SQL statement from provided arguments\nconst parseSQL = (args) =>\n  typeof args[0] === 'string'\n    ? args[0]\n    : typeof args[0] === 'object' && typeof args[0].sql === 'string'\n    ? args[0].sql\n    : error(`No 'sql' statement provided.`)\n\n// Parse the parameters from provided arguments\nconst parseParams = (args) =>\n  Array.isArray(args[0].parameters)\n    ? args[0].parameters\n    : typeof args[0].parameters === 'object'\n    ? [args[0].parameters]\n    : Array.isArray(args[1])\n    ? args[1]\n    : typeof args[1] === 'object'\n    ? [args[1]]\n    : args[0].parameters\n    ? error(`'parameters' must be an object or array`)\n    : args[1]\n    ? error('Parameters must be an object or array')\n    : []\n\n// Parse the supplied database, or default to config\nconst parseDatabase = (config, args) =>\n  config.transactionId\n    ? config.database\n    : typeof args[0].database === 'string'\n    ? args[0].database\n    : args[0].database\n    ? error(`'database' must be a string.`)\n    : config.database\n    ? config.database\n    : undefined // removed for #47 - error('No \\'database\\' provided.')\n\n// Parse the supplied hydrateColumnNames command, or default to config\nconst parseHydrate = (config, args) =>\n  typeof args[0].hydrateColumnNames === 'boolean'\n    ? args[0].hydrateColumnNames\n    : args[0].hydrateColumnNames\n    ? error(`'hydrateColumnNames' must be a boolean.`)\n    : config.hydrateColumnNames\n\n// Parse the supplied format options, or default to config\nconst parseFormatOptions = (config, args) =>\n  typeof args[0].formatOptions === 'object'\n    ? {\n        deserializeDate:\n          typeof args[0].formatOptions.deserializeDate === 'boolean'\n            ? args[0].formatOptions.deserializeDate\n            : args[0].formatOptions.deserializeDate\n            ? error(`'formatOptions.deserializeDate' must be a boolean.`)\n            : config.formatOptions.deserializeDate,\n        treatAsLocalDate:\n          typeof args[0].formatOptions.treatAsLocalDate == 'boolean'\n            ? args[0].formatOptions.treatAsLocalDate\n            : args[0].formatOptions.treatAsLocalDate\n            ? error(`'formatOptions.treatAsLocalDate' must be a boolean.`)\n            : config.formatOptions.treatAsLocalDate\n      }\n    : args[0].formatOptions\n    ? error(`'formatOptions' must be an object.`)\n    : config.formatOptions\n\n// Prepare method params w/ supplied inputs if an object is passed\nconst prepareParams = ({ secretArn, resourceArn }, args) => {\n  return Object.assign(\n    { secretArn, resourceArn }, // return Arns\n    typeof args[0] === 'object' ? omit(args[0], ['hydrateColumnNames', 'parameters']) : {} // merge any inputs\n  )\n}\n\n// Utility function for removing certain keys from an object\nconst omit = (obj, values) =>\n  Object.keys(obj).reduce((acc, x) => (values.includes(x) ? acc : Object.assign(acc, { [x]: obj[x] })), {})\n\n// Utility function for picking certain keys from an object\nconst pick = (obj, values) =>\n  Object.keys(obj).reduce((acc, x) => (values.includes(x) ? Object.assign(acc, { [x]: obj[x] }) : acc), {})\n\n// Utility function for flattening arrays\nconst flatten = (arr) => arr.reduce((acc, x) => acc.concat(x), [])\n\n// Normize parameters so that they are all in standard format\nconst normalizeParams = (params) =>\n  params.reduce(\n    (acc, p) =>\n      Array.isArray(p)\n        ? acc.concat([normalizeParams(p)])\n        : (Object.keys(p).length === 2 && p.name && typeof p.value !== 'undefined') ||\n          (Object.keys(p).length === 3 && p.name && typeof p.value !== 'undefined' && p.cast)\n        ? acc.concat(p)\n        : acc.concat(splitParams(p)),\n    []\n  ) // end reduce\n\n// Prepare parameters\nconst processParams = (engine, sql, sqlParams, params, formatOptions, row = 0) => {\n  return {\n    processedParams: params.reduce((acc, p) => {\n      if (Array.isArray(p)) {\n        const result = processParams(engine, sql, sqlParams, p, formatOptions, row)\n        if (row === 0) {\n          sql = result.escapedSql\n          row++\n        }\n        return acc.concat([result.processedParams])\n      } else if (sqlParams[p.name]) {\n        if (sqlParams[p.name].type === 'n_ph') {\n          if (p.cast) {\n            const regex = new RegExp(':' + p.name + '\\\\b', 'g')\n            sql = sql.replace(regex, engine === 'pg' ? `:${p.name}::${p.cast}` : `CAST(:${p.name} AS ${p.cast})`)\n          }\n          acc.push(formatParam(p.name, p.value, formatOptions))\n        } else if (row === 0) {\n          const regex = new RegExp('::' + p.name + '\\\\b', 'g')\n          sql = sql.replace(regex, sqlString.escapeId(p.value))\n        }\n        return acc\n      } else {\n        return acc\n      }\n    }, []),\n    escapedSql: sql\n  }\n}\n\n// Converts parameter to the name/value format\nconst formatParam = (n, v, formatOptions) => formatType(n, v, getType(v), getTypeHint(v), formatOptions)\n\n// Converts object params into name/value format\nconst splitParams = (p) => Object.keys(p).reduce((arr, x) => arr.concat({ name: x, value: p[x] }), [])\n\n// Get all the sql parameters and assign them types\nconst getSqlParams = (sql) => {\n  // TODO: probably need to remove comments from the sql\n  // TODO: placeholders?\n  // sql.match(/\\:{1,2}\\w+|\\?+/g).map((p,i) => {\n  return (sql.match(/:{1,2}\\w+/g) || [])\n    .map((p) => {\n      // TODO: future support for placeholder parsing?\n      // return p === '??' ? { type: 'id' } // identifier\n      //   : p === '?' ? { type: 'ph', label: '__d'+i  } // placeholder\n      return p.startsWith('::')\n        ? { type: 'n_id', label: p.substr(2) } // named id\n        : { type: 'n_ph', label: p.substr(1) } // named placeholder\n    })\n    .reduce((acc, x) => {\n      return Object.assign(acc, {\n        [x.label]: {\n          type: x.type\n        }\n      })\n    }, {}) // end reduce\n}\n\n// Gets the value type and returns the correct value field name\n// TODO: Support more types as the are released\nconst getType = (val) =>\n  typeof val === 'string'\n    ? 'stringValue'\n    : typeof val === 'boolean'\n    ? 'booleanValue'\n    : typeof val === 'number' && parseInt(val) === val\n    ? 'longValue'\n    : typeof val === 'number' && parseFloat(val) === val\n    ? 'doubleValue'\n    : val === null\n    ? 'isNull'\n    : isDate(val)\n    ? 'stringValue'\n    : Buffer.isBuffer(val)\n    ? 'blobValue'\n    : // : Array.isArray(val) ? 'arrayValue' This doesn't work yet\n    // TODO: there is a 'structValue' now for postgres\n    typeof val === 'object' && Object.keys(val).length === 1 && supportedTypes.includes(Object.keys(val)[0])\n    ? null\n    : undefined\n\n// Hint to specify the underlying object type for data type mapping\nconst getTypeHint = (val) => (isDate(val) ? 'TIMESTAMP' : undefined)\n\nconst isDate = (val) => val instanceof Date\n\n// Creates a standard Data API parameter using the supplied inputs\nconst formatType = (name, value, type, typeHint, formatOptions) => {\n  return Object.assign(\n    typeHint != null ? { name, typeHint } : { name },\n    type === null\n      ? { value }\n      : {\n          value: {\n            [type ? type : error(`'${name}' is an invalid type`)]:\n              type === 'isNull'\n                ? true\n                : isDate(value)\n                ? formatToTimeStamp(value, formatOptions && formatOptions.treatAsLocalDate)\n                : value\n          }\n        }\n  )\n} // end formatType\n\n// Formats the (UTC) date to the AWS accepted YYYY-MM-DD HH:MM:SS[.FFF] format\n// See https://docs.aws.amazon.com/rdsdataservice/latest/APIReference/API_SqlParameter.html\nconst formatToTimeStamp = (date, treatAsLocalDate) => {\n  const pad = (val, num = 2) => '0'.repeat(num - (val + '').length) + val\n\n  const year = treatAsLocalDate ? date.getFullYear() : date.getUTCFullYear()\n  const month = (treatAsLocalDate ? date.getMonth() : date.getUTCMonth()) + 1 // Convert to human month\n  const day = treatAsLocalDate ? date.getDate() : date.getUTCDate()\n\n  const hours = treatAsLocalDate ? date.getHours() : date.getUTCHours()\n  const minutes = treatAsLocalDate ? date.getMinutes() : date.getUTCMinutes()\n  const seconds = treatAsLocalDate ? date.getSeconds() : date.getUTCSeconds()\n  const ms = treatAsLocalDate ? date.getMilliseconds() : date.getUTCMilliseconds()\n\n  const fraction = ms <= 0 ? '' : `.${pad(ms, 3)}`\n\n  return `${year}-${pad(month)}-${pad(day)} ${pad(hours)}:${pad(minutes)}:${pad(seconds)}${fraction}`\n}\n\n// Converts the string value to a Date object.\n// If standard TIMESTAMP format (YYYY-MM-DD[ HH:MM:SS[.FFF]]) without TZ + treatAsLocalDate=false then assume UTC Date\n// In all other cases convert value to datetime as-is (also values with TZ info)\nconst formatFromTimeStamp = (value, treatAsLocalDate) =>\n  !treatAsLocalDate && /^\\d{4}-\\d{2}-\\d{2}(\\s\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?)?$/.test(value)\n    ? new Date(value + 'Z')\n    : new Date(value)\n\n// Formats the results of a query response\nconst formatResults = (\n  {\n    // destructure results\n    columnMetadata, // ONLY when hydrate or includeResultMetadata is true\n    numberOfRecordsUpdated, // ONLY for executeStatement method\n    records, // ONLY for executeStatement method\n    generatedFields, // ONLY for INSERTS\n    updateResults // ONLY on batchExecuteStatement\n  },\n  hydrate,\n  includeMeta,\n  formatOptions\n) =>\n  Object.assign(\n    includeMeta ? { columnMetadata } : {},\n    numberOfRecordsUpdated !== undefined && !records ? { numberOfRecordsUpdated } : {},\n    records\n      ? {\n          records: formatRecords(records, columnMetadata, hydrate, formatOptions)\n        }\n      : {},\n    updateResults ? { updateResults: formatUpdateResults(updateResults) } : {},\n    generatedFields && generatedFields.length > 0 ? { insertId: generatedFields[0].longValue } : {}\n  )\n\n// Processes records and either extracts Typed Values into an array, or\n// object with named column labels\nconst formatRecords = (recs, columns, hydrate, formatOptions) => {\n  // Create map for efficient value parsing\n  let fmap =\n    recs && recs[0]\n      ? recs[0].map((x, i) => {\n          return Object.assign({}, columns ? { label: columns[i].label, typeName: columns[i].typeName } : {}) // add column label and typeName\n        })\n      : {}\n\n  // Map over all the records (rows)\n  return recs\n    ? recs.map((rec) => {\n        // Reduce each field in the record (row)\n        return rec.reduce(\n          (acc, field, i) => {\n            // If the field is null, always return null\n            if (field.isNull === true) {\n              return hydrate // object if hydrate, else array\n                ? Object.assign(acc, { [fmap[i].label]: null })\n                : acc.concat(null)\n\n              // If the field is mapped, return the mapped field\n            } else if (fmap[i] && fmap[i].field) {\n              const value = formatRecordValue(field[fmap[i].field], fmap[i].typeName, formatOptions)\n              return hydrate // object if hydrate, else array\n                ? Object.assign(acc, { [fmap[i].label]: value })\n                : acc.concat(value)\n\n              // Else discover the field type\n            } else {\n              // Look for non-null fields\n              Object.keys(field).map((type) => {\n                if (type !== 'isNull' && field[type] !== null) {\n                  fmap[i]['field'] = type\n                }\n              })\n\n              // Return the mapped field (this should NEVER be null)\n              const value = formatRecordValue(field[fmap[i].field], fmap[i].typeName, formatOptions)\n              return hydrate // object if hydrate, else array\n                ? Object.assign(acc, { [fmap[i].label]: value })\n                : acc.concat(value)\n            }\n          },\n          hydrate ? {} : []\n        ) // init object if hydrate, else init array\n      })\n    : [] // empty record set returns an array\n} // end formatRecords\n\n// Format record value based on its value, the database column's typeName and the formatting options\nconst formatRecordValue = (value, typeName, formatOptions) => {\n  if (\n    formatOptions &&\n    formatOptions.deserializeDate &&\n    ['DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMPTZ', 'TIMESTAMP WITH TIME ZONE'].includes(typeName.toUpperCase())\n  ) {\n    return formatFromTimeStamp(\n      value,\n      (formatOptions && formatOptions.treatAsLocalDate) || typeName === 'TIMESTAMP WITH TIME ZONE'\n    )\n  } else if (typeName === 'JSON') {\n    return JSON.parse(value)\n  } else {\n    return value\n  }\n}\n\n// Format updateResults and extract insertIds\nconst formatUpdateResults = (res) =>\n  res.map((x) => {\n    return x.generatedFields && x.generatedFields.length > 0 ? { insertId: x.generatedFields[0].longValue } : {}\n  })\n\n// Merge configuration data with supplied arguments\nconst mergeConfig = (initialConfig, args) => Object.assign(initialConfig, args)\n\n/********************************************************************/\n/**  QUERY MANAGEMENT                                              **/\n/********************************************************************/\n\n// Query function (use standard form for `this` context)\nconst query = async function (config, ..._args) {\n  // Flatten array if nested arrays (fixes #30)\n  const args = Array.isArray(_args[0]) ? flatten(_args) : _args\n\n  // Parse and process sql\n  const sql = parseSQL(args)\n  const sqlParams = getSqlParams(sql)\n\n  // Parse hydration setting\n  const hydrateColumnNames = parseHydrate(config, args)\n\n  // Parse data format settings\n  const formatOptions = parseFormatOptions(config, args)\n\n  // Parse and normalize parameters\n  const parameters = normalizeParams(parseParams(args))\n\n  // Process parameters and escape necessary SQL\n  const { processedParams, escapedSql } = processParams(config.engine, sql, sqlParams, parameters, formatOptions)\n\n  // Determine if this is a batch request\n  const isBatch = processedParams.length > 0 && Array.isArray(processedParams[0])\n\n  // Create/format the parameters\n  const params = Object.assign(\n    prepareParams(config, args),\n    {\n      database: parseDatabase(config, args), // add database\n      sql: escapedSql // add escaped sql statement\n    },\n    // Only include parameters if they exist\n    processedParams.length > 0\n      ? // Batch statements require parameterSets instead of parameters\n        { [isBatch ? 'parameterSets' : 'parameters']: processedParams }\n      : {},\n    // Force meta data if set and not a batch\n    hydrateColumnNames && !isBatch ? { includeResultMetadata: true } : {},\n    // If a transactionId is passed, overwrite any manual input\n    config.transactionId ? { transactionId: config.transactionId } : {}\n  ) // end params\n\n  try {\n    // attempt to run the query\n\n    // Capture the result for debugging\n    let result = await (isBatch\n      ? config.RDS.batchExecuteStatement(params).promise()\n      : config.RDS.executeStatement(params).promise())\n\n    // Format and return the results\n    return formatResults(result, hydrateColumnNames, args[0].includeResultMetadata === true, formatOptions)\n  } catch (e) {\n    if (this && this.rollback) {\n      let rollback = await config.RDS.rollbackTransaction(\n        pick(params, ['resourceArn', 'secretArn', 'transactionId'])\n      ).promise()\n\n      this.rollback(e, rollback)\n    }\n    // Throw the error\n    throw e\n  }\n} // end query\n\n/********************************************************************/\n/**  TRANSACTION MANAGEMENT                                        **/\n/********************************************************************/\n\n// Init a transaction object and return methods\nconst transaction = (config, _args) => {\n  let args = typeof _args === 'object' ? [_args] : [{}]\n  let queries = [] // keep track of queries\n  let rollback = () => {} // default rollback event\n\n  const txConfig = Object.assign(prepareParams(config, args), {\n    database: parseDatabase(config, args), // add database\n    hydrateColumnNames: parseHydrate(config, args), // add hydrate\n    formatOptions: parseFormatOptions(config, args), // add formatOptions\n    RDS: config.RDS // reference the RDSDataService instance\n  })\n\n  return {\n    query: function (...args) {\n      if (typeof args[0] === 'function') {\n        queries.push(args[0])\n      } else {\n        queries.push(() => [...args])\n      }\n      return this\n    },\n    rollback: function (fn) {\n      if (typeof fn === 'function') {\n        rollback = fn\n      }\n      return this\n    },\n    commit: async function () {\n      return await commit(txConfig, queries, rollback)\n    }\n  }\n}\n\n// Commit transaction by running queries\nconst commit = async (config, queries, rollback) => {\n  let results = [] // keep track of results\n\n  // Start a transaction\n  const { transactionId } = await config.RDS.beginTransaction(\n    pick(config, ['resourceArn', 'secretArn', 'database'])\n  ).promise()\n\n  // Add transactionId to the config\n  let txConfig = Object.assign(config, { transactionId })\n\n  // Loop through queries\n  for (let i = 0; i < queries.length; i++) {\n    // Execute the queries, pass the rollback as context\n    let result = await query.apply({ rollback }, [config, queries[i](results[results.length - 1], results)])\n    // Add the result to the main results accumulator\n    results.push(result)\n  }\n\n  // Commit our transaction\n  const { transactionStatus } = await txConfig.RDS.commitTransaction(\n    pick(config, ['resourceArn', 'secretArn', 'transactionId'])\n  ).promise()\n\n  // Add the transaction status to the results\n  results.push({ transactionStatus })\n\n  // Return the results\n  return results\n}\n\n/********************************************************************/\n/**  INSTANTIATION                                                 **/\n/********************************************************************/\n\n// Export main function\n/**\n * Create a Data API client instance\n * @param {object} params\n * @param {'mysql'|'pg'} [params.engine=mysql] The type of database (MySQL or Postgres)\n * @param {string} params.resourceArn The ARN of your Aurora Serverless Cluster\n * @param {string} params.secretArn The ARN of the secret associated with your\n *   database credentials\n * @param {string} [params.database] The name of the database\n * @param {boolean} [params.hydrateColumnNames=true] Return objects with column\n *   names as keys\n * @param {object} [params.options={}] Configuration object passed directly\n *   into RDSDataService\n * @param {object} [params.formatOptions] Date-related formatting options\n * @param {boolean} [params.formatOptions.deserializeDate=false]\n * @param {boolean} [params.formatOptions.treatAsLocalDate=false]\n * @param {boolean} [params.keepAlive] DEPRECATED\n * @param {boolean} [params.sslEnabled=true] DEPRECATED\n * @param {string} [params.region] DEPRECATED\n *\n */\nconst init = (params) => {\n  // Set the options for the RDSDataService\n  const options =\n    typeof params.options === 'object'\n      ? params.options\n      : params.options !== undefined\n      ? error(`'options' must be an object`)\n      : {}\n\n  // Update the AWS http agent with the region\n  if (typeof params.region === 'string') {\n    options.region = params.region\n  }\n\n  // Disable ssl if wanted for local development\n  if (params.sslEnabled === false) {\n    options.sslEnabled = false\n  }\n\n  // Set the configuration for this instance\n  const config = {\n    // Require engine\n    engine: typeof params.engine === 'string' ? params.engine : 'mysql',\n\n    // Require secretArn\n    secretArn: typeof params.secretArn === 'string' ? params.secretArn : error(`'secretArn' string value required`),\n\n    // Require resourceArn\n    resourceArn:\n      typeof params.resourceArn === 'string' ? params.resourceArn : error(`'resourceArn' string value required`),\n\n    // Load optional database\n    database:\n      typeof params.database === 'string'\n        ? params.database\n        : params.database !== undefined\n        ? error(`'database' must be a string`)\n        : undefined,\n\n    // Load optional schema DISABLED for now since this isn't used with MySQL\n    // schema: typeof params.schema === 'string' ? params.schema\n    //   : params.schema !== undefined ? error(`'schema' must be a string`)\n    //   : undefined,\n\n    // Set hydrateColumnNames (default to true)\n    hydrateColumnNames: typeof params.hydrateColumnNames === 'boolean' ? params.hydrateColumnNames : true,\n\n    // Value formatting options. For date the deserialization is enabled and (re)stored as UTC\n    formatOptions: {\n      deserializeDate:\n        typeof params.formatOptions === 'object' && params.formatOptions.deserializeDate === false ? false : true,\n      treatAsLocalDate: typeof params.formatOptions === 'object' && params.formatOptions.treatAsLocalDate\n    },\n\n    // TODO: Put this in a separate module for testing?\n    // Create an instance of RDSDataService\n    RDS: params.AWS ? new params.AWS.RDSDataService(options) : new AWS.RDSDataService(options)\n  } // end config\n\n  // Return public methods\n  return {\n    // Query method, pass config and parameters\n    query: (...x) => query(config, ...x),\n    // Transaction method, pass config and parameters\n    transaction: (x) => transaction(config, x),\n\n    // Export promisified versions of the RDSDataService methods\n    batchExecuteStatement: (args) =>\n      config.RDS.batchExecuteStatement(\n        mergeConfig(pick(config, ['resourceArn', 'secretArn', 'database']), args)\n      ).promise(),\n    beginTransaction: (args) =>\n      config.RDS.beginTransaction(mergeConfig(pick(config, ['resourceArn', 'secretArn', 'database']), args)).promise(),\n    commitTransaction: (args) =>\n      config.RDS.commitTransaction(mergeConfig(pick(config, ['resourceArn', 'secretArn']), args)).promise(),\n    executeStatement: (args) =>\n      config.RDS.executeStatement(mergeConfig(pick(config, ['resourceArn', 'secretArn', 'database']), args)).promise(),\n    rollbackTransaction: (args) =>\n      config.RDS.rollbackTransaction(mergeConfig(pick(config, ['resourceArn', 'secretArn']), args)).promise()\n  }\n} // end exports\n\nmodule.exports = init\n","import { ColumnMetadata } from 'typeorm/metadata/ColumnMetadata'\n\nconst pad = (val: string | number, num = 2) => '0'.repeat(num - (val.toString()).length) + val\n\nexport const dateToDateTimeString = (date: Date) => {\n  const year = date.getUTCFullYear()\n  const month = date.getUTCMonth() + 1 // Convert to human month\n  const day = date.getUTCDate()\n\n  const hours = date.getUTCHours()\n  const minutes = date.getUTCMinutes()\n  const seconds = date.getUTCSeconds()\n  const ms = date.getUTCMilliseconds()\n\n  const fraction = ms <= 0 ? '' : `.${pad(ms, 3)}`\n\n  return `${year}-${pad(month)}-${pad(day)} ${pad(hours)}:${pad(minutes)}:${pad(seconds)}${fraction}`\n}\n\nexport const dateToDateString = (date: Date | string) => {\n  if (typeof date === 'string') {\n    return date\n  }\n\n  const year = date.getUTCFullYear()\n  const month = date.getUTCMonth() + 1 // Convert to human month\n  const day = date.getUTCDate()\n\n  return `${year}-${pad(month)}-${pad(day)}`\n}\n\nexport const dateToTimeString = (date: Date | string) => {\n  if (typeof date === 'string') {\n    return date\n  }\n\n  const hours = date.getUTCHours()\n  const minutes = date.getUTCMinutes()\n  const seconds = date.getUTCSeconds()\n  const ms = date.getUTCMilliseconds()\n\n  const fraction = ms <= 0 ? '' : `.${pad(ms, 3)}`\n\n  return `${pad(hours)}:${pad(minutes)}:${pad(seconds)}${fraction}`\n}\n\nexport const simpleArrayToString = (value: any[]|any): string[]|any => {\n  if (Array.isArray(value)) {\n    return (value as any[])\n      .map((i) => String(i))\n      .join(',')\n  }\n\n  return value\n}\n\nexport const stringToSimpleArray = (value: string|any): any[] => {\n  if (value instanceof String || typeof value === 'string') {\n    if (value.length > 0) {\n      return value.split(',')\n    }\n    return []\n  }\n\n  return value\n}\n\n\nexport const getDecimalCast = ({ precision, scale }: Pick<ColumnMetadata, 'scale' | 'precision'>): string => {\n  if (!precision) return 'DECIMAL'\n\n  if (!scale) return `DECIMAL(${precision})`\n\n  return `DECIMAL(${precision},${scale})`\n}\n","import { ColumnMetadata } from 'typeorm/metadata/ColumnMetadata'\n\nexport interface QueryTransformationResult {\n  queryString: string\n  parameters: any[]\n}\n\nexport abstract class QueryTransformer {\n  protected transformOptions?: any\n\n  public constructor(transformOptions?: any) {\n    this.transformOptions = transformOptions\n  }\n\n  public transformQueryAndParameters(query: string, srcParameters: any[] = []) {\n    if (!srcParameters.length) {\n      return { queryString: query, parameters: [] }\n    }\n\n    const queryString = this.transformQuery(query, srcParameters)\n    const parameters = this.transformParameters(srcParameters)\n    return { queryString, parameters }\n  }\n\n  public abstract preparePersistentValue(value: any, metadata: ColumnMetadata): any\n\n  public abstract prepareHydratedValue(value: any, metadata: ColumnMetadata): any\n\n  protected abstract transformQuery(query: string, srcParameters: any[]): string\n\n  protected abstract transformParameters(srcParameters?: any[]): any[] | undefined\n}\n","import { ColumnMetadata } from 'typeorm/metadata/ColumnMetadata'\nimport {\n  dateToDateString,\n  dateToDateTimeString,\n  dateToTimeString,\n  getDecimalCast,\n  simpleArrayToString,\n  stringToSimpleArray,\n} from '../utils/transform.utils'\nimport { QueryTransformer } from './query-transformer'\n\nexport class MysqlQueryTransformer extends QueryTransformer {\n  preparePersistentValue(value: any, metadata: ColumnMetadata): any {\n    if (!value) {\n      return value\n    }\n\n    switch (metadata.type) {\n      case 'date':\n        return {\n          value: dateToDateString(value),\n          cast: 'DATE',\n        }\n      case 'time':\n        return {\n          value: dateToTimeString(value),\n          cast: 'TIME',\n        }\n      case 'timestamp':\n      case 'datetime':\n      case Date:\n        return {\n          value: dateToDateTimeString(value),\n          cast: 'DATETIME',\n        }\n      case 'decimal':\n      case 'numeric':\n        return {\n          value: '' + value,\n          cast: getDecimalCast(metadata),\n        }\n      case 'set':\n      case 'simple-array':\n        return {\n          value: simpleArrayToString(value),\n        }\n      case 'json':\n      case 'simple-json':\n        return {\n          value: JSON.stringify(value),\n        }\n      case 'enum':\n      case 'simple-enum':\n        return {\n          value: '' + value,\n        }\n      default:\n        return {\n          value,\n        }\n    }\n  }\n\n  prepareHydratedValue(value: any, metadata: ColumnMetadata): any {\n    if (value === null || value === undefined) {\n      return value\n    }\n\n    switch (metadata.type) {\n      case Boolean:\n        return !!value\n      case 'datetime':\n      case Date:\n      case 'timestamp':\n      case 'timestamp with time zone':\n      case 'timestamp without time zone':\n        return typeof value === 'string' ? new Date(value + ' GMT+0') : value\n      case 'date':\n        return dateToDateString(value)\n      case 'year':\n        return typeof value === 'string' ? new Date(value).getUTCFullYear() : value.getUTCFullYear()\n      case 'time':\n        return value\n      case 'set':\n      case 'simple-array':\n        return typeof value === 'string' ? stringToSimpleArray(value) : value\n      case 'json':\n      case 'simple-json':\n        return typeof value === 'string' ? JSON.parse(value) : value\n      case 'enum':\n      case 'simple-enum':\n        if (metadata.enum && !Number.isNaN(value) && metadata.enum.indexOf(parseInt(value, 10)) >= 0) {\n          return parseInt(value, 10)\n        }\n        return value\n      default:\n        return value\n    }\n  }\n\n  protected transformQuery(query: string, parameters: any[]): string {\n    const quoteCharacters = [\"'\", '\"']\n    let newQueryString = ''\n    let currentQuote = null\n    let srcIndex = 0\n    let destIndex = 0\n\n    for (let i = 0; i < query.length; i += 1) {\n      const currentCharacter = query[i]\n      const currentCharacterEscaped = i !== 0 && query[i - 1] === '\\\\'\n\n      if (currentCharacter === '?' && !currentQuote) {\n        const parameter = parameters![srcIndex]\n\n        if (Array.isArray(parameter)) {\n          // eslint-disable-next-line no-loop-func\n          const additionalParameters = parameter.map((_, index) => `:param_${destIndex + index}`)\n\n          newQueryString += additionalParameters.join(', ')\n          destIndex += additionalParameters.length\n        } else {\n          newQueryString += `:param_${destIndex}`\n          destIndex += 1\n        }\n        srcIndex += 1\n      } else {\n        newQueryString += currentCharacter\n\n        if (quoteCharacters.includes(currentCharacter) && !currentCharacterEscaped) {\n          if (!currentQuote) {\n            currentQuote = currentCharacter\n          } else if (currentQuote === currentCharacter) {\n            currentQuote = null\n          }\n        }\n      }\n    }\n\n    return newQueryString\n  }\n\n  protected transformParameters(parameters?: any[]) {\n    if (!parameters) {\n      return parameters\n    }\n\n    const expandedParameters = this.expandArrayParameters(parameters)\n\n    return expandedParameters.map((parameter, index) => {\n      if (parameter === undefined) {\n        return parameter\n      }\n\n      if (typeof parameter === 'object' && typeof parameter?.value !== 'undefined') {\n        return ({\n          name: `param_${index}`,\n          ...parameter,\n        })\n      }\n\n      return {\n        name: `param_${index}`,\n        value: parameter,\n      }\n    })\n  }\n\n  protected expandArrayParameters(parameters: any[]): any[] {\n    return parameters.reduce(\n      (expandedParameters, parameter) => {\n        if (Array.isArray(parameter)) {\n          expandedParameters.push(...parameter)\n        } else {\n          expandedParameters.push(parameter)\n        }\n        return expandedParameters\n      }, [],\n    )\n  }\n}\n","import { ColumnMetadata } from 'typeorm/metadata/ColumnMetadata'\nimport { dateToDateString, dateToTimeString, dateToDateTimeString, simpleArrayToString, stringToSimpleArray, getDecimalCast } from '../utils/transform.utils'\nimport { QueryTransformer } from './query-transformer'\n\nexport class PostgresQueryTransformer extends QueryTransformer {\n  public preparePersistentValue(value:any, metadata: ColumnMetadata): any {\n    if (!value) {\n      return value\n    }\n\n    switch (metadata.type) {\n      case 'date':\n        return {\n          value: dateToDateString(value),\n          cast: 'DATE',\n        }\n      case 'time':\n        return {\n          value: dateToTimeString(value),\n          cast: 'TIME',\n        }\n      case 'time with time zone':\n        return {\n          value: dateToTimeString(value),\n          cast: 'time with time zone',\n        }\n      case 'timetz':\n        return {\n          value: dateToTimeString(value),\n          cast: 'timetz',\n        }\n      case 'interval':\n        return {\n          value,\n          cast: 'interval',\n        }\n      case 'timestamp':\n      case 'datetime':\n      case 'timestamp with time zone':\n      case 'timestamptz':\n        return {\n          value: dateToDateTimeString(value),\n          cast: 'TIMESTAMP',\n        }\n      case 'decimal':\n      case 'numeric':\n        return {\n          value: '' + value,\n          cast: getDecimalCast(metadata),\n        }\n      case 'simple-array':\n        return {\n          value: simpleArrayToString(value),\n        }\n      case 'simple-json':\n      case 'json':\n      case 'jsonb':\n        return {\n          value: JSON.stringify(value),\n          cast: 'JSON',\n        }\n      case 'uuid':\n        return {\n          value: '' + value,\n          cast: 'UUID',\n        }\n      case 'simple-enum':\n      case 'enum':\n        return {\n          value: '' + value,\n          cast: metadata.enumName || `${metadata.entityMetadata.tableName}_${metadata.databaseName.toLowerCase()}_enum`,\n        }\n      default:\n        return {\n          value,\n        }\n    }\n  }\n\n  prepareHydratedValue(value: any, metadata: ColumnMetadata): any {\n    if (value === null || value === undefined) {\n      return value\n    }\n\n    switch (metadata.type) {\n      case Boolean:\n        return !!value\n      case 'datetime':\n      case Date:\n      case 'timestamp':\n      case 'timestamp with time zone':\n      case 'timestamp without time zone':\n      case 'timestamptz':\n        return typeof value === 'string' ? new Date(value + ' GMT+0') : value\n      case 'date':\n        return dateToDateString(value)\n      case 'time':\n        return value\n      case 'hstore':\n        if (metadata.hstoreType === 'object') {\n          const unescapeString = (str: string) => str.replace(/\\\\./g, (m) => m[1])\n          const regexp = /\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"=>(?:(NULL)|\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")(?:,|$)/g\n          const object: any = {};\n          `${value}`.replace(regexp, (_, key, nullValue, stringValue) => {\n            object[unescapeString(key)] = nullValue ? null : unescapeString(stringValue)\n            return ''\n          })\n          return object\n        }\n        return value\n      case 'simple-array':\n        return typeof value === 'string' ? stringToSimpleArray(value) : value\n      case 'json':\n      case 'simple-json':\n      case 'jsonb':\n        return typeof value === 'string' ? JSON.parse(value) : value\n      case 'enum':\n      case 'simple-enum':\n        if (metadata.isArray) {\n          // manually convert enum array to array of values (pg does not support, see https://github.com/brianc/node-pg-types/issues/56)\n          value = value !== '{}' ? (value as string).substr(1, (value as string).length - 2)\n            .split(',') : []\n          // convert to number if that exists in possible enum options\n          return value.map((val: string) => (!Number.isNaN(+val) && metadata.enum!.indexOf(parseInt(val, 10)) >= 0 ? parseInt(val, 10) : val))\n        }\n        // convert to number if that exists in poosible enum options\n        return !Number.isNaN(+value) && metadata.enum!.indexOf(parseInt(value, 10)) >= 0 ? parseInt(value, 10) : value\n\n      default:\n        return value\n    }\n  }\n\n  protected transformQuery(query: string) {\n    const quoteCharacters = [\"'\", '\"']\n    let newQueryString = ''\n    let currentQuote = null\n\n    for (let i = 0; i < query.length; i += 1) {\n      const currentCharacter = query[i]\n      const currentCharacterEscaped = i !== 0 && query[i - 1] === '\\\\'\n\n      if (currentCharacter === '$' && !currentQuote) {\n        newQueryString += ':param_'\n      } else {\n        newQueryString += currentCharacter\n\n        if (quoteCharacters.includes(currentCharacter) && !currentCharacterEscaped) {\n          if (!currentQuote) {\n            currentQuote = currentCharacter\n          } else if (currentQuote === currentCharacter) {\n            currentQuote = null\n          }\n        }\n      }\n    }\n\n    return newQueryString\n  }\n\n  protected transformParameters(parameters?: any[]) {\n    if (!parameters) {\n      return parameters\n    }\n\n    return parameters.map((parameter, index) => {\n      if (parameter === undefined) {\n        return parameter\n      }\n\n      if (typeof parameter === 'object' && typeof parameter?.value !== 'undefined') {\n        return ({\n          name: `param_${index + 1}`,\n          ...parameter,\n        })\n      }\n\n      // Hack for UUID\n      if (this.transformOptions?.enableUuidHack && /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test('' + parameter)) {\n        return {\n          name: `param_${index + 1}`,\n          value: '' + parameter,\n          cast: 'uuid',\n        }\n      }\n\n      return {\n        name: `param_${index + 1}`,\n        value: parameter,\n      }\n    })\n  }\n}\n","// @ts-ignore\nimport createDataApiClient from 'data-api-client'\nimport { ColumnMetadata } from 'typeorm/metadata/ColumnMetadata'\nimport { MysqlQueryTransformer, PostgresQueryTransformer, QueryTransformer } from './query-transformer'\n\nclass DataApiDriver {\n  private readonly client: any\n\n  private transactionId?: string\n\n  constructor(\n    private readonly region: string,\n    private readonly secretArn: string,\n    private readonly resourceArn: string,\n    private readonly database: string,\n    private readonly loggerFn: (query: string, parameters?: any[]) => void = () => undefined,\n    private readonly queryTransformer: QueryTransformer,\n    private readonly serviceConfigOptions?: any,\n    private readonly formatOptions?: any,\n    private readonly queryConfigOptions?: { continueAfterTimeout?: boolean },\n  ) {\n    this.region = region\n    this.secretArn = secretArn\n    this.resourceArn = resourceArn\n    this.database = database\n    this.loggerFn = loggerFn\n    this.serviceConfigOptions = serviceConfigOptions || {}\n    this.serviceConfigOptions.region = region\n    this.client = createDataApiClient({\n      secretArn,\n      resourceArn,\n      database,\n      options: this.serviceConfigOptions,\n      formatOptions,\n    })\n    this.queryTransformer = queryTransformer\n    this.queryConfigOptions = serviceConfigOptions?.queryConfigOptions\n  }\n\n  public async query(query: string, parameters?: any[]): Promise<any> {\n    const transformedQueryData = this.queryTransformer.transformQueryAndParameters(query, parameters)\n\n    this.loggerFn(transformedQueryData.queryString, transformedQueryData.parameters)\n\n    let result = await this.client.query({\n      sql: transformedQueryData.queryString,\n      parameters: transformedQueryData.parameters,\n      transactionId: this.transactionId,\n      continueAfterTimeout: this.queryConfigOptions?.continueAfterTimeout ?? false,\n    })\n\n    // TODO: Remove this hack when all Postgres calls in TypeORM use structured result\n    if (result.records) {\n      result = result.records\n      result.records = result\n    }\n\n    return result\n  }\n\n  public preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n    return this.queryTransformer.preparePersistentValue(value, columnMetadata)\n  }\n\n  public prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n    return this.queryTransformer.prepareHydratedValue(value, columnMetadata)\n  }\n\n  public async startTransaction(): Promise<void> {\n    const { transactionId } = await this.client.beginTransaction()\n    this.transactionId = transactionId\n  }\n\n  public async commitTransaction(): Promise<void> {\n    await this.client.commitTransaction({ transactionId: this.transactionId })\n    this.transactionId = undefined\n  }\n\n  public async rollbackTransaction(): Promise<void> {\n    await this.client.rollbackTransaction({ transactionId: this.transactionId })\n    this.transactionId = undefined\n  }\n}\n\nconst createMysqlDriver = (region: string, secretArn: string, resourceArn: string, database: string,\n  loggerFn: (query: string, parameters?: any[]) => void = () => undefined,\n  serviceConfigOptions?: any, formatOptions?: any) => new DataApiDriver(\n  region,\n  secretArn,\n  resourceArn,\n  database,\n  loggerFn,\n  new MysqlQueryTransformer({ enableUuidHack: formatOptions?.enableUuidHack }),\n  serviceConfigOptions,\n  formatOptions,\n)\n\nexport default createMysqlDriver\n\nconst createPostgresDriver = (region: string, secretArn: string, resourceArn: string, database: string,\n  loggerFn: (query: string, parameters?: any[]) => void = () => undefined,\n  serviceConfigOptions?: any, formatOptions?: any) => new DataApiDriver(\n  region,\n  secretArn,\n  resourceArn,\n  database,\n  loggerFn,\n  new PostgresQueryTransformer({ enableUuidHack: formatOptions?.enableUuidHack }),\n  serviceConfigOptions,\n  formatOptions,\n)\n\nexport const pg = createPostgresDriver\n\nexport { MysqlQueryTransformer, PostgresQueryTransformer }\n"],"names":["require$$0","sqlString","AWS","createDataApiClient"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAI,SAAS,IAAI,OAAO,CAAC;;AAEzB,IAAI,gBAAgB,MAAM,IAAI,CAAC;AAC/B,IAAI,kBAAkB,IAAI,KAAK,CAAC;AAChC,IAAI,mBAAmB,GAAG,yBAAyB,CAAC;AACpD,IAAI,gBAAgB,MAAM;EACxB,IAAI,KAAK,KAAK;EACd,IAAI,KAAK,KAAK;EACd,IAAI,KAAK,KAAK;EACd,IAAI,KAAK,KAAK;EACd,IAAI,KAAK,KAAK;EACd,MAAM,GAAG,KAAK;EACd,GAAG,MAAM,KAAK;EACd,IAAI,KAAK,MAAM;EACf,IAAI,KAAK,MAAM;CAChB,CAAC;;AAEF,SAAS,CAAC,QAAQ,GAAG,SAAS,QAAQ,CAAC,GAAG,EAAE,eAAe,EAAE;EAC3D,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;IACtB,IAAI,GAAG,GAAG,EAAE,CAAC;;IAEb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;MACnC,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,IAAI,IAAI,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;KAC5E;;IAED,OAAO,GAAG,CAAC;GACZ,MAAM,IAAI,eAAe,EAAE;IAC1B,OAAO,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC;GAChE,MAAM;IACL,OAAO,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,kBAAkB,EAAE,KAAK,CAAC,GAAG,GAAG,CAAC;GACnG;CACF,CAAC;;AAEF,SAAS,CAAC,MAAM,GAAG,SAAS,MAAM,CAAC,GAAG,EAAE,gBAAgB,EAAE,QAAQ,EAAE;EAClE,IAAI,GAAG,KAAK,SAAS,IAAI,GAAG,KAAK,IAAI,EAAE;IACrC,OAAO,MAAM,CAAC;GACf;;EAED,QAAQ,OAAO,GAAG;IAChB,KAAK,SAAS,EAAE,OAAO,CAAC,GAAG,IAAI,MAAM,GAAG,OAAO,CAAC;IAChD,KAAK,QAAQ,EAAE,OAAO,GAAG,GAAG,EAAE,CAAC;IAC/B,KAAK,QAAQ;MACX,IAAI,GAAG,YAAY,IAAI,EAAE;QACvB,OAAO,SAAS,CAAC,YAAY,CAAC,GAAG,EAAE,QAAQ,IAAI,OAAO,CAAC,CAAC;OACzD,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QAC7B,OAAO,SAAS,CAAC,WAAW,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;OAC7C,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC/B,OAAO,SAAS,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;OACtC,MAAM,IAAI,OAAO,GAAG,CAAC,WAAW,KAAK,UAAU,EAAE;QAChD,OAAO,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;OAClC,MAAM,IAAI,gBAAgB,EAAE;QAC3B,OAAO,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;OACrC,MAAM;QACL,OAAO,SAAS,CAAC,cAAc,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;OAChD;IACH,SAAS,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC;GACnC;CACF,CAAC;;AAEF,SAAS,CAAC,WAAW,GAAG,SAAS,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE;EAC5D,IAAI,GAAG,GAAG,EAAE,CAAC;;EAEb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACrC,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;IAEnB,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;MACtB,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,IAAI,IAAI,GAAG,GAAG,SAAS,CAAC,WAAW,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,GAAG,CAAC;KACjF,MAAM;MACL,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,IAAI,IAAI,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;KACtE;GACF;;EAED,OAAO,GAAG,CAAC;CACZ,CAAC;;AAEF,SAAS,CAAC,MAAM,GAAG,SAAS,MAAM,CAAC,GAAG,EAAE,MAAM,EAAE,gBAAgB,EAAE,QAAQ,EAAE;EAC1E,IAAI,MAAM,IAAI,IAAI,EAAE;IAClB,OAAO,GAAG,CAAC;GACZ;;EAED,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;IAC1B,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC;GACnB;;EAED,IAAI,UAAU,UAAU,CAAC,CAAC;EAC1B,IAAI,iBAAiB,GAAG,MAAM,CAAC;EAC/B,IAAI,MAAM,cAAc,EAAE,CAAC;EAC3B,IAAI,WAAW,SAAS,CAAC,CAAC;EAC1B,IAAI,KAAK,CAAC;;EAEV,OAAO,WAAW,GAAG,MAAM,CAAC,MAAM,KAAK,KAAK,GAAG,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;IAC3E,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;;IAE1B,IAAI,GAAG,GAAG,CAAC,EAAE;MACX,SAAS;KACV;;IAED,IAAI,KAAK,GAAG,GAAG,KAAK,CAAC;QACjB,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACvC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,gBAAgB,EAAE,QAAQ,CAAC,CAAC;;IAEtE,MAAM,IAAI,GAAG,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;IACrD,UAAU,GAAG,iBAAiB,CAAC,SAAS,CAAC;IACzC,WAAW,EAAE,CAAC;GACf;;EAED,IAAI,UAAU,KAAK,CAAC,EAAE;;IAEpB,OAAO,GAAG,CAAC;GACZ;;EAED,IAAI,UAAU,GAAG,GAAG,CAAC,MAAM,EAAE;IAC3B,OAAO,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;GACvC;;EAED,OAAO,MAAM,CAAC;CACf,CAAC;;AAEF,SAAS,CAAC,YAAY,GAAG,SAAS,YAAY,CAAC,IAAI,EAAE,QAAQ,EAAE;EAC7D,IAAI,EAAE,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;;EAExB,IAAI,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,EAAE;IACvB,OAAO,MAAM,CAAC;GACf;;EAED,IAAI,IAAI,CAAC;EACT,IAAI,KAAK,CAAC;EACV,IAAI,GAAG,CAAC;EACR,IAAI,IAAI,CAAC;EACT,IAAI,MAAM,CAAC;EACX,IAAI,MAAM,CAAC;EACX,IAAI,WAAW,CAAC;;EAEhB,IAAI,QAAQ,KAAK,OAAO,EAAE;IACxB,IAAI,UAAU,EAAE,CAAC,WAAW,EAAE,CAAC;IAC/B,KAAK,SAAS,EAAE,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;IAChC,GAAG,WAAW,EAAE,CAAC,OAAO,EAAE,CAAC;IAC3B,IAAI,UAAU,EAAE,CAAC,QAAQ,EAAE,CAAC;IAC5B,MAAM,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC;IAC9B,MAAM,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC;IAC9B,WAAW,GAAG,EAAE,CAAC,eAAe,EAAE,CAAC;GACpC,MAAM;IACL,IAAI,EAAE,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;;IAEnC,IAAI,EAAE,KAAK,KAAK,IAAI,EAAE,KAAK,CAAC,EAAE;MAC5B,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC;KACzC;;IAED,IAAI,SAAS,EAAE,CAAC,cAAc,EAAE,CAAC;IACjC,KAAK,SAAS,EAAE,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;IACnC,GAAG,WAAW,EAAE,CAAC,UAAU,EAAE,CAAC;IAC9B,IAAI,UAAU,EAAE,CAAC,WAAW,EAAE,CAAC;IAC/B,MAAM,QAAQ,EAAE,CAAC,aAAa,EAAE,CAAC;IACjC,MAAM,QAAQ,EAAE,CAAC,aAAa,EAAE,CAAC;IACjC,WAAW,GAAG,EAAE,CAAC,kBAAkB,EAAE,CAAC;GACvC;;;EAGD,IAAI,GAAG,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG;IAChF,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,GAAG;IAC5E,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;;EAE1B,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC;CAC1B,CAAC;;AAEF,SAAS,CAAC,cAAc,GAAG,SAAS,cAAc,CAAC,MAAM,EAAE;EACzD,OAAO,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;CACnD,CAAC;;AAEF,SAAS,CAAC,cAAc,GAAG,SAAS,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE;EACnE,IAAI,GAAG,GAAG,EAAE,CAAC;;EAEb,KAAK,IAAI,GAAG,IAAI,MAAM,EAAE;IACtB,IAAI,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;;IAEtB,IAAI,OAAO,GAAG,KAAK,UAAU,EAAE;MAC7B,SAAS;KACV;;IAED,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,KAAK,CAAC,GAAG,EAAE,GAAG,IAAI,IAAI,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;GACjH;;EAED,OAAO,GAAG,CAAC;CACZ,CAAC;;AAEF,SAAS,CAAC,GAAG,GAAG,SAAS,GAAG,CAAC,GAAG,EAAE;EAChC,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;IAC3B,MAAM,IAAI,SAAS,CAAC,+BAA+B,CAAC,CAAC;GACtD;;EAED,OAAO;IACL,WAAW,EAAE,SAAS,WAAW,GAAG,EAAE,OAAO,GAAG,CAAC,EAAE;GACpD,CAAC;CACH,CAAC;;AAEF,SAAS,YAAY,CAAC,GAAG,EAAE;EACzB,IAAI,UAAU,GAAG,mBAAmB,CAAC,SAAS,GAAG,CAAC,CAAC;EACnD,IAAI,UAAU,GAAG,EAAE,CAAC;EACpB,IAAI,KAAK,CAAC;;EAEV,QAAQ,KAAK,GAAG,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG;IAC9C,UAAU,IAAI,GAAG,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,KAAK,CAAC,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9E,UAAU,GAAG,mBAAmB,CAAC,SAAS,CAAC;GAC5C;;EAED,IAAI,UAAU,KAAK,CAAC,EAAE;;IAEpB,OAAO,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;GACxB;;EAED,IAAI,UAAU,GAAG,GAAG,CAAC,MAAM,EAAE;IAC3B,OAAO,GAAG,GAAG,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC;GACvD;;EAED,OAAO,GAAG,GAAG,UAAU,GAAG,GAAG,CAAC;CAC/B;;AAED,SAAS,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE;EAC/B,MAAM,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;EAC3B,OAAO,MAAM,CAAC,MAAM,GAAG,MAAM,EAAE;IAC7B,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC;GACvB;;EAED,OAAO,MAAM,CAAC;CACf;;AAED,SAAS,eAAe,CAAC,EAAE,EAAE;EAC3B,IAAI,EAAE,KAAK,GAAG,EAAE;IACd,OAAO,CAAC,CAAC;GACV;;EAED,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;EAC9C,IAAI,CAAC,EAAE;IACL,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;GACrG;EACD,OAAO,KAAK,CAAC;CACd;;;AC5OD,aAAc,GAAGA,WAA0B,CAAC;;;;;;;;;;;;;;;;;;;;;;ACsB5C,MAAM,cAAc,GAAG;EACrB,YAAY;EACZ,WAAW;EACX,cAAc;EACd,aAAa;EACb,QAAQ;EACR,WAAW;EACX,aAAa;EACb,aAAa;EACd;;;;;;;AAOD,MAAM,KAAK,GAAG,CAAC,GAAG,GAAG,KAAK;EACxB,MAAM,KAAK,CAAC,GAAG,GAAG,CAAC;EACpB;;;AAGD,MAAM,QAAQ,GAAG,CAAC,IAAI;EACpB,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ;MACvB,IAAI,CAAC,CAAC,CAAC;MACP,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAI,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,QAAQ;MAC9D,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG;MACX,KAAK,CAAC,CAAC,4BAA4B,CAAC,EAAC;;;AAG3C,MAAM,WAAW,GAAG,CAAC,IAAI;EACvB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;MAC7B,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU;MAClB,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,KAAK,QAAQ;MACtC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;MACpB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;MACtB,IAAI,CAAC,CAAC,CAAC;MACP,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ;MAC3B,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;MACT,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU;MAClB,KAAK,CAAC,CAAC,uCAAuC,CAAC,CAAC;MAChD,IAAI,CAAC,CAAC,CAAC;MACP,KAAK,CAAC,uCAAuC,CAAC;MAC9C,GAAE;;;AAGR,MAAM,aAAa,GAAG,CAAC,MAAM,EAAE,IAAI;EACjC,MAAM,CAAC,aAAa;MAChB,MAAM,CAAC,QAAQ;MACf,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,QAAQ;MACpC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ;MAChB,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ;MAChB,KAAK,CAAC,CAAC,4BAA4B,CAAC,CAAC;MACrC,MAAM,CAAC,QAAQ;MACf,MAAM,CAAC,QAAQ;MACf,UAAS;;;AAGf,MAAM,YAAY,GAAG,CAAC,MAAM,EAAE,IAAI;EAChC,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,kBAAkB,KAAK,SAAS;MAC3C,IAAI,CAAC,CAAC,CAAC,CAAC,kBAAkB;MAC1B,IAAI,CAAC,CAAC,CAAC,CAAC,kBAAkB;MAC1B,KAAK,CAAC,CAAC,uCAAuC,CAAC,CAAC;MAChD,MAAM,CAAC,mBAAkB;;;AAG/B,MAAM,kBAAkB,GAAG,CAAC,MAAM,EAAE,IAAI;EACtC,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,aAAa,KAAK,QAAQ;MACrC;QACE,eAAe;UACb,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,eAAe,KAAK,SAAS;cACtD,IAAI,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,eAAe;cACrC,IAAI,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,eAAe;cACrC,KAAK,CAAC,CAAC,kDAAkD,CAAC,CAAC;cAC3D,MAAM,CAAC,aAAa,CAAC,eAAe;QAC1C,gBAAgB;UACd,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,gBAAgB,IAAI,SAAS;cACtD,IAAI,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,gBAAgB;cACtC,IAAI,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,gBAAgB;cACtC,KAAK,CAAC,CAAC,mDAAmD,CAAC,CAAC;cAC5D,MAAM,CAAC,aAAa,CAAC,gBAAgB;OAC5C;MACD,IAAI,CAAC,CAAC,CAAC,CAAC,aAAa;MACrB,KAAK,CAAC,CAAC,kCAAkC,CAAC,CAAC;MAC3C,MAAM,CAAC,cAAa;;;AAG1B,MAAM,aAAa,GAAG,CAAC,EAAE,SAAS,EAAE,WAAW,EAAE,EAAE,IAAI,KAAK;EAC1D,OAAO,MAAM,CAAC,MAAM;IAClB,EAAE,SAAS,EAAE,WAAW,EAAE;IAC1B,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,oBAAoB,EAAE,YAAY,CAAC,CAAC,GAAG,EAAE;GACvF;EACF;;;AAGD,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,MAAM;EACvB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,MAAM,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAC;;;AAG3G,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,MAAM;EACvB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,MAAM,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE,EAAE,EAAC;;;AAG3G,MAAM,OAAO,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,KAAK,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,EAAC;;;AAGlE,MAAM,eAAe,GAAG,CAAC,MAAM;EAC7B,MAAM,CAAC,MAAM;IACX,CAAC,GAAG,EAAE,CAAC;MACL,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;UACZ,GAAG,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;UAChC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,OAAO,CAAC,CAAC,KAAK,KAAK,WAAW;WACvE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,OAAO,CAAC,CAAC,KAAK,KAAK,WAAW,IAAI,CAAC,CAAC,IAAI,CAAC;UACnF,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;UACb,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IAChC,EAAE;IACH;;;AAGH,MAAM,aAAa,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,MAAM,EAAE,aAAa,EAAE,GAAG,GAAG,CAAC,KAAK;EAChF,OAAO;IACL,eAAe,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,KAAK;MACzC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;QACpB,MAAM,MAAM,GAAG,aAAa,CAAC,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,EAAE,aAAa,EAAE,GAAG,EAAC;QAC3E,IAAI,GAAG,KAAK,CAAC,EAAE;UACb,GAAG,GAAG,MAAM,CAAC,WAAU;UACvB,GAAG,GAAE;SACN;QACD,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;OAC5C,MAAM,IAAI,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;QAC5B,IAAI,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,MAAM,EAAE;UACrC,IAAI,CAAC,CAAC,IAAI,EAAE;YACV,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,KAAK,EAAE,GAAG,EAAC;YACnD,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC;WACtG;UACD,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,EAAE,aAAa,CAAC,EAAC;SACtD,MAAM,IAAI,GAAG,KAAK,CAAC,EAAE;UACpB,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,GAAG,KAAK,EAAE,GAAG,EAAC;UACpD,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,EAAEC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,EAAC;SACtD;QACD,OAAO,GAAG;OACX,MAAM;QACL,OAAO,GAAG;OACX;KACF,EAAE,EAAE,CAAC;IACN,UAAU,EAAE,GAAG;GAChB;EACF;;;AAGD,MAAM,WAAW,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,aAAa,KAAK,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAAE,aAAa,EAAC;;;AAGxG,MAAM,WAAW,GAAG,CAAC,CAAC,KAAK,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,KAAK,GAAG,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAC;;;AAGtG,MAAM,YAAY,GAAG,CAAC,GAAG,KAAK;;;;EAI5B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE;KAClC,GAAG,CAAC,CAAC,CAAC,KAAK;;;;MAIV,OAAO,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC;UACrB,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;UACpC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;KACzC,CAAC;KACD,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,KAAK;MAClB,OAAO,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;QACxB,CAAC,CAAC,CAAC,KAAK,GAAG;UACT,IAAI,EAAE,CAAC,CAAC,IAAI;SACb;OACF,CAAC;KACH,EAAE,EAAE,CAAC;EACT;;;;AAID,MAAM,OAAO,GAAG,CAAC,GAAG;EAClB,OAAO,GAAG,KAAK,QAAQ;MACnB,aAAa;MACb,OAAO,GAAG,KAAK,SAAS;MACxB,cAAc;MACd,OAAO,GAAG,KAAK,QAAQ,IAAI,QAAQ,CAAC,GAAG,CAAC,KAAK,GAAG;MAChD,WAAW;MACX,OAAO,GAAG,KAAK,QAAQ,IAAI,UAAU,CAAC,GAAG,CAAC,KAAK,GAAG;MAClD,aAAa;MACb,GAAG,KAAK,IAAI;MACZ,QAAQ;MACR,MAAM,CAAC,GAAG,CAAC;MACX,aAAa;MACb,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC;MACpB,WAAW;;;IAGb,OAAO,GAAG,KAAK,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACtG,IAAI;MACJ,UAAS;;;AAGf,MAAM,WAAW,GAAG,CAAC,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,GAAG,SAAS,EAAC;;AAEpE,MAAM,MAAM,GAAG,CAAC,GAAG,KAAK,GAAG,YAAY,KAAI;;;AAG3C,MAAM,UAAU,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,aAAa,KAAK;EACjE,OAAO,MAAM,CAAC,MAAM;IAClB,QAAQ,IAAI,IAAI,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE,IAAI,EAAE;IAChD,IAAI,KAAK,IAAI;QACT,EAAE,KAAK,EAAE;QACT;UACE,KAAK,EAAE;YACL,CAAC,IAAI,GAAG,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;cAClD,IAAI,KAAK,QAAQ;kBACb,IAAI;kBACJ,MAAM,CAAC,KAAK,CAAC;kBACb,iBAAiB,CAAC,KAAK,EAAE,aAAa,IAAI,aAAa,CAAC,gBAAgB,CAAC;kBACzE,KAAK;WACZ;SACF;GACN;EACF;;;;AAID,MAAM,iBAAiB,GAAG,CAAC,IAAI,EAAE,gBAAgB,KAAK;EACpD,MAAM,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,EAAE,MAAM,CAAC,GAAG,IAAG;;EAEvE,MAAM,IAAI,GAAG,gBAAgB,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,cAAc,GAAE;EAC1E,MAAM,KAAK,GAAG,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,WAAW,EAAE,IAAI,EAAC;EAC3E,MAAM,GAAG,GAAG,gBAAgB,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,UAAU,GAAE;;EAEjE,MAAM,KAAK,GAAG,gBAAgB,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,WAAW,GAAE;EACrE,MAAM,OAAO,GAAG,gBAAgB,GAAG,IAAI,CAAC,UAAU,EAAE,GAAG,IAAI,CAAC,aAAa,GAAE;EAC3E,MAAM,OAAO,GAAG,gBAAgB,GAAG,IAAI,CAAC,UAAU,EAAE,GAAG,IAAI,CAAC,aAAa,GAAE;EAC3E,MAAM,EAAE,GAAG,gBAAgB,GAAG,IAAI,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC,kBAAkB,GAAE;;EAEhF,MAAM,QAAQ,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAC;;EAEhD,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;EACpG;;;;;AAKD,MAAM,mBAAmB,GAAG,CAAC,KAAK,EAAE,gBAAgB;EAClD,CAAC,gBAAgB,IAAI,mDAAmD,CAAC,IAAI,CAAC,KAAK,CAAC;MAChF,IAAI,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;MACrB,IAAI,IAAI,CAAC,KAAK,EAAC;;;AAGrB,MAAM,aAAa,GAAG;EACpB;;IAEE,cAAc;IACd,sBAAsB;IACtB,OAAO;IACP,eAAe;IACf,aAAa;GACd;EACD,OAAO;EACP,WAAW;EACX,aAAa;;EAEb,MAAM,CAAC,MAAM;IACX,WAAW,GAAG,EAAE,cAAc,EAAE,GAAG,EAAE;IACrC,sBAAsB,KAAK,SAAS,IAAI,CAAC,OAAO,GAAG,EAAE,sBAAsB,EAAE,GAAG,EAAE;IAClF,OAAO;QACH;UACE,OAAO,EAAE,aAAa,CAAC,OAAO,EAAE,cAAc,EAAE,OAAO,EAAE,aAAa,CAAC;SACxE;QACD,EAAE;IACN,aAAa,GAAG,EAAE,aAAa,EAAE,mBAAmB,CAAC,aAAa,CAAC,EAAE,GAAG,EAAE;IAC1E,eAAe,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE,QAAQ,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,GAAG,EAAE;IAChG;;;;AAIH,MAAM,aAAa,GAAG,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,aAAa,KAAK;;EAE/D,IAAI,IAAI;IACN,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;QACX,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK;UACpB,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC;SACpG,CAAC;QACF,GAAE;;;EAGR,OAAO,IAAI;MACP,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;;QAEhB,OAAO,GAAG,CAAC,MAAM;UACf,CAAC,GAAG,EAAE,KAAK,EAAE,CAAC,KAAK;;YAEjB,IAAI,KAAK,CAAC,MAAM,KAAK,IAAI,EAAE;cACzB,OAAO,OAAO;kBACV,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,EAAE,CAAC;kBAC7C,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC;;;aAGrB,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE;cACnC,MAAM,KAAK,GAAG,iBAAiB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,aAAa,EAAC;cACtF,OAAO,OAAO;kBACV,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,KAAK,EAAE,CAAC;kBAC9C,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;;;aAGtB,MAAM;;cAEL,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK;gBAC/B,IAAI,IAAI,KAAK,QAAQ,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE;kBAC7C,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,KAAI;iBACxB;eACF,EAAC;;;cAGF,MAAM,KAAK,GAAG,iBAAiB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,aAAa,EAAC;cACtF,OAAO,OAAO;kBACV,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,KAAK,EAAE,CAAC;kBAC9C,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;aACtB;WACF;UACD,OAAO,GAAG,EAAE,GAAG,EAAE;SAClB;OACF,CAAC;MACF,EAAE;EACP;;;AAGD,MAAM,iBAAiB,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,aAAa,KAAK;EAC5D;IACE,aAAa;IACb,aAAa,CAAC,eAAe;IAC7B,CAAC,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,aAAa,EAAE,0BAA0B,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;IAC7G;IACA,OAAO,mBAAmB;MACxB,KAAK;MACL,CAAC,aAAa,IAAI,aAAa,CAAC,gBAAgB,KAAK,QAAQ,KAAK,0BAA0B;KAC7F;GACF,MAAM,IAAI,QAAQ,KAAK,MAAM,EAAE;IAC9B,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;GACzB,MAAM;IACL,OAAO,KAAK;GACb;EACF;;;AAGD,MAAM,mBAAmB,GAAG,CAAC,GAAG;EAC9B,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK;IACb,OAAO,CAAC,CAAC,eAAe,IAAI,CAAC,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,GAAG,EAAE;GAC7G,EAAC;;;AAGJ,MAAM,WAAW,GAAG,CAAC,aAAa,EAAE,IAAI,KAAK,MAAM,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,EAAC;;;;;;;AAO/E,MAAM,KAAK,GAAG,gBAAgB,MAAM,EAAE,GAAG,KAAK,EAAE;;EAE9C,MAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,MAAK;;;EAG7D,MAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,EAAC;EAC1B,MAAM,SAAS,GAAG,YAAY,CAAC,GAAG,EAAC;;;EAGnC,MAAM,kBAAkB,GAAG,YAAY,CAAC,MAAM,EAAE,IAAI,EAAC;;;EAGrD,MAAM,aAAa,GAAG,kBAAkB,CAAC,MAAM,EAAE,IAAI,EAAC;;;EAGtD,MAAM,UAAU,GAAG,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,EAAC;;;EAGrD,MAAM,EAAE,eAAe,EAAE,UAAU,EAAE,GAAG,aAAa,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,UAAU,EAAE,aAAa,EAAC;;;EAG/G,MAAM,OAAO,GAAG,eAAe,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,EAAC;;;EAG/E,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM;IAC1B,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC;IAC3B;MACE,QAAQ,EAAE,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC;MACrC,GAAG,EAAE,UAAU;KAChB;;IAED,eAAe,CAAC,MAAM,GAAG,CAAC;;QAEtB,EAAE,CAAC,OAAO,GAAG,eAAe,GAAG,YAAY,GAAG,eAAe,EAAE;QAC/D,EAAE;;IAEN,kBAAkB,IAAI,CAAC,OAAO,GAAG,EAAE,qBAAqB,EAAE,IAAI,EAAE,GAAG,EAAE;;IAErE,MAAM,CAAC,aAAa,GAAG,EAAE,aAAa,EAAE,MAAM,CAAC,aAAa,EAAE,GAAG,EAAE;IACpE;;EAED,IAAI;;;;IAIF,IAAI,MAAM,GAAG,OAAO,OAAO;QACvB,MAAM,CAAC,GAAG,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE;QAClD,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAC;;;IAGlD,OAAO,aAAa,CAAC,MAAM,EAAE,kBAAkB,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,qBAAqB,KAAK,IAAI,EAAE,aAAa,CAAC;GACxG,CAAC,OAAO,CAAC,EAAE;IACV,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;MACzB,IAAI,QAAQ,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,mBAAmB;QACjD,IAAI,CAAC,MAAM,EAAE,CAAC,aAAa,EAAE,WAAW,EAAE,eAAe,CAAC,CAAC;OAC5D,CAAC,OAAO,GAAE;;MAEX,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,EAAC;KAC3B;;IAED,MAAM,CAAC;GACR;EACF;;;;;;;AAOD,MAAM,WAAW,GAAG,CAAC,MAAM,EAAE,KAAK,KAAK;EACrC,IAAI,IAAI,GAAG,OAAO,KAAK,KAAK,QAAQ,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,EAAC;EACrD,IAAI,OAAO,GAAG,GAAE;EAChB,IAAI,QAAQ,GAAG,MAAM,GAAE;;EAEvB,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE;IAC1D,QAAQ,EAAE,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC;IACrC,kBAAkB,EAAE,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC;IAC9C,aAAa,EAAE,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC;IAC/C,GAAG,EAAE,MAAM,CAAC,GAAG;GAChB,EAAC;;EAEF,OAAO;IACL,KAAK,EAAE,UAAU,GAAG,IAAI,EAAE;MACxB,IAAI,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,UAAU,EAAE;QACjC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC;OACtB,MAAM;QACL,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,EAAC;OAC9B;MACD,OAAO,IAAI;KACZ;IACD,QAAQ,EAAE,UAAU,EAAE,EAAE;MACtB,IAAI,OAAO,EAAE,KAAK,UAAU,EAAE;QAC5B,QAAQ,GAAG,GAAE;OACd;MACD,OAAO,IAAI;KACZ;IACD,MAAM,EAAE,kBAAkB;MACxB,OAAO,MAAM,MAAM,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC;KACjD;GACF;EACF;;;AAGD,MAAM,MAAM,GAAG,OAAO,MAAM,EAAE,OAAO,EAAE,QAAQ,KAAK;EAClD,IAAI,OAAO,GAAG,GAAE;;;EAGhB,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,gBAAgB;IACzD,IAAI,CAAC,MAAM,EAAE,CAAC,aAAa,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;GACvD,CAAC,OAAO,GAAE;;;EAGX,IAAI,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,aAAa,EAAE,EAAC;;;EAGvD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;IAEvC,IAAI,MAAM,GAAG,MAAM,KAAK,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,EAAC;;IAExG,OAAO,CAAC,IAAI,CAAC,MAAM,EAAC;GACrB;;;EAGD,MAAM,EAAE,iBAAiB,EAAE,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,iBAAiB;IAChE,IAAI,CAAC,MAAM,EAAE,CAAC,aAAa,EAAE,WAAW,EAAE,eAAe,CAAC,CAAC;GAC5D,CAAC,OAAO,GAAE;;;EAGX,OAAO,CAAC,IAAI,CAAC,EAAE,iBAAiB,EAAE,EAAC;;;EAGnC,OAAO,OAAO;EACf;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BD,MAAM,IAAI,GAAG,CAAC,MAAM,KAAK;;EAEvB,MAAM,OAAO;IACX,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ;QAC9B,MAAM,CAAC,OAAO;QACd,MAAM,CAAC,OAAO,KAAK,SAAS;QAC5B,KAAK,CAAC,CAAC,2BAA2B,CAAC,CAAC;QACpC,GAAE;;;EAGR,IAAI,OAAO,MAAM,CAAC,MAAM,KAAK,QAAQ,EAAE;IACrC,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC,OAAM;GAC/B;;;EAGD,IAAI,MAAM,CAAC,UAAU,KAAK,KAAK,EAAE;IAC/B,OAAO,CAAC,UAAU,GAAG,MAAK;GAC3B;;;EAGD,MAAM,MAAM,GAAG;;IAEb,MAAM,EAAE,OAAO,MAAM,CAAC,MAAM,KAAK,QAAQ,GAAG,MAAM,CAAC,MAAM,GAAG,OAAO;;;IAGnE,SAAS,EAAE,OAAO,MAAM,CAAC,SAAS,KAAK,QAAQ,GAAG,MAAM,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC,iCAAiC,CAAC,CAAC;;;IAG/G,WAAW;MACT,OAAO,MAAM,CAAC,WAAW,KAAK,QAAQ,GAAG,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC,mCAAmC,CAAC,CAAC;;;IAG5G,QAAQ;MACN,OAAO,MAAM,CAAC,QAAQ,KAAK,QAAQ;UAC/B,MAAM,CAAC,QAAQ;UACf,MAAM,CAAC,QAAQ,KAAK,SAAS;UAC7B,KAAK,CAAC,CAAC,2BAA2B,CAAC,CAAC;UACpC,SAAS;;;;;;;;IAQf,kBAAkB,EAAE,OAAO,MAAM,CAAC,kBAAkB,KAAK,SAAS,GAAG,MAAM,CAAC,kBAAkB,GAAG,IAAI;;;IAGrG,aAAa,EAAE;MACb,eAAe;QACb,OAAO,MAAM,CAAC,aAAa,KAAK,QAAQ,IAAI,MAAM,CAAC,aAAa,CAAC,eAAe,KAAK,KAAK,GAAG,KAAK,GAAG,IAAI;MAC3G,gBAAgB,EAAE,OAAO,MAAM,CAAC,aAAa,KAAK,QAAQ,IAAI,MAAM,CAAC,aAAa,CAAC,gBAAgB;KACpG;;;;IAID,GAAG,EAAE,MAAM,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,IAAIC,MAAG,CAAC,cAAc,CAAC,OAAO,CAAC;IAC3F;;;EAGD,OAAO;;IAEL,KAAK,EAAE,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;;IAEpC,WAAW,EAAE,CAAC,CAAC,KAAK,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC;;;IAG1C,qBAAqB,EAAE,CAAC,IAAI;MAC1B,MAAM,CAAC,GAAG,CAAC,qBAAqB;QAC9B,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,aAAa,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC;OAC1E,CAAC,OAAO,EAAE;IACb,gBAAgB,EAAE,CAAC,IAAI;MACrB,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,aAAa,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE;IAClH,iBAAiB,EAAE,CAAC,IAAI;MACtB,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE;IACvG,gBAAgB,EAAE,CAAC,IAAI;MACrB,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,aAAa,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE;IAClH,mBAAmB,EAAE,CAAC,IAAI;MACxB,MAAM,CAAC,GAAG,CAAC,mBAAmB,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE;GAC1G;EACF;;AAED,iBAAc,GAAG,IAAI;;AC9mBrB,IAAM,GAAG,GAAG,UAAC,GAAoB,EAAE,GAAO;IAAP,oBAAA,EAAA,OAAO;IAAK,OAAA,GAAG,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC,GAAG,GAAG;CAAA,CAAA;AAE9F,AAAO,IAAM,oBAAoB,GAAG,UAAC,IAAU;IAC7C,IAAM,IAAI,GAAG,IAAI,CAAC,cAAc,EAAE,CAAA;IAClC,IAAM,KAAK,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,CAAA;IACpC,IAAM,GAAG,GAAG,IAAI,CAAC,UAAU,EAAE,CAAA;IAE7B,IAAM,KAAK,GAAG,IAAI,CAAC,WAAW,EAAE,CAAA;IAChC,IAAM,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAA;IACpC,IAAM,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAA;IACpC,IAAM,EAAE,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAA;IAEpC,IAAM,QAAQ,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,MAAI,GAAG,CAAC,EAAE,EAAE,CAAC,CAAG,CAAA;IAEhD,OAAU,IAAI,SAAI,GAAG,CAAC,KAAK,CAAC,SAAI,GAAG,CAAC,GAAG,CAAC,SAAI,GAAG,CAAC,KAAK,CAAC,SAAI,GAAG,CAAC,OAAO,CAAC,SAAI,GAAG,CAAC,OAAO,CAAC,GAAG,QAAU,CAAA;CACpG,CAAA;AAED,AAAO,IAAM,gBAAgB,GAAG,UAAC,IAAmB;IAClD,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QAC5B,OAAO,IAAI,CAAA;KACZ;IAED,IAAM,IAAI,GAAG,IAAI,CAAC,cAAc,EAAE,CAAA;IAClC,IAAM,KAAK,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,CAAA;IACpC,IAAM,GAAG,GAAG,IAAI,CAAC,UAAU,EAAE,CAAA;IAE7B,OAAU,IAAI,SAAI,GAAG,CAAC,KAAK,CAAC,SAAI,GAAG,CAAC,GAAG,CAAG,CAAA;CAC3C,CAAA;AAED,AAAO,IAAM,gBAAgB,GAAG,UAAC,IAAmB;IAClD,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QAC5B,OAAO,IAAI,CAAA;KACZ;IAED,IAAM,KAAK,GAAG,IAAI,CAAC,WAAW,EAAE,CAAA;IAChC,IAAM,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAA;IACpC,IAAM,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAA;IACpC,IAAM,EAAE,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAA;IAEpC,IAAM,QAAQ,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,MAAI,GAAG,CAAC,EAAE,EAAE,CAAC,CAAG,CAAA;IAEhD,OAAU,GAAG,CAAC,KAAK,CAAC,SAAI,GAAG,CAAC,OAAO,CAAC,SAAI,GAAG,CAAC,OAAO,CAAC,GAAG,QAAU,CAAA;CAClE,CAAA;AAED,AAAO,IAAM,mBAAmB,GAAG,UAAC,KAAgB;IAClD,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QACxB,OAAQ,KAAe;aACpB,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,MAAM,CAAC,CAAC,CAAC,GAAA,CAAC;aACrB,IAAI,CAAC,GAAG,CAAC,CAAA;KACb;IAED,OAAO,KAAK,CAAA;CACb,CAAA;AAED,AAAO,IAAM,mBAAmB,GAAG,UAAC,KAAiB;IACnD,IAAI,KAAK,YAAY,MAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QACxD,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YACpB,OAAO,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;SACxB;QACD,OAAO,EAAE,CAAA;KACV;IAED,OAAO,KAAK,CAAA;CACb,CAAA;AAGD,AAAO,IAAM,cAAc,GAAG,UAAC,EAAiE;QAA/D,SAAS,eAAA,EAAE,KAAK,WAAA;IAC/C,IAAI,CAAC,SAAS;QAAE,OAAO,SAAS,CAAA;IAEhC,IAAI,CAAC,KAAK;QAAE,OAAO,aAAW,SAAS,MAAG,CAAA;IAE1C,OAAO,aAAW,SAAS,SAAI,KAAK,MAAG,CAAA;CACxC,CAAA;;ACnED;IAGE,0BAAmB,gBAAsB;QACvC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAA;KACzC;IAEM,sDAA2B,GAAlC,UAAmC,KAAa,EAAE,aAAyB;QAAzB,8BAAA,EAAA,kBAAyB;QACzE,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;YACzB,OAAO,EAAE,WAAW,EAAE,KAAK,EAAE,UAAU,EAAE,EAAE,EAAE,CAAA;SAC9C;QAED,IAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,aAAa,CAAC,CAAA;QAC7D,IAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAA;QAC1D,OAAO,EAAE,WAAW,aAAA,EAAE,UAAU,YAAA,EAAE,CAAA;KACnC;IASH,uBAAC;CAAA,IAAA;;;ICpB0C,yCAAgB;IAA3D;;KAwKC;IAvKC,sDAAsB,GAAtB,UAAuB,KAAU,EAAE,QAAwB;QACzD,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,KAAK,CAAA;SACb;QAED,QAAQ,QAAQ,CAAC,IAAI;YACnB,KAAK,MAAM;gBACT,OAAO;oBACL,KAAK,EAAE,gBAAgB,CAAC,KAAK,CAAC;oBAC9B,IAAI,EAAE,MAAM;iBACb,CAAA;YACH,KAAK,MAAM;gBACT,OAAO;oBACL,KAAK,EAAE,gBAAgB,CAAC,KAAK,CAAC;oBAC9B,IAAI,EAAE,MAAM;iBACb,CAAA;YACH,KAAK,WAAW,CAAC;YACjB,KAAK,UAAU,CAAC;YAChB,KAAK,IAAI;gBACP,OAAO;oBACL,KAAK,EAAE,oBAAoB,CAAC,KAAK,CAAC;oBAClC,IAAI,EAAE,UAAU;iBACjB,CAAA;YACH,KAAK,SAAS,CAAC;YACf,KAAK,SAAS;gBACZ,OAAO;oBACL,KAAK,EAAE,EAAE,GAAG,KAAK;oBACjB,IAAI,EAAE,cAAc,CAAC,QAAQ,CAAC;iBAC/B,CAAA;YACH,KAAK,KAAK,CAAC;YACX,KAAK,cAAc;gBACjB,OAAO;oBACL,KAAK,EAAE,mBAAmB,CAAC,KAAK,CAAC;iBAClC,CAAA;YACH,KAAK,MAAM,CAAC;YACZ,KAAK,aAAa;gBAChB,OAAO;oBACL,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;iBAC7B,CAAA;YACH,KAAK,MAAM,CAAC;YACZ,KAAK,aAAa;gBAChB,OAAO;oBACL,KAAK,EAAE,EAAE,GAAG,KAAK;iBAClB,CAAA;YACH;gBACE,OAAO;oBACL,KAAK,OAAA;iBACN,CAAA;SACJ;KACF;IAED,oDAAoB,GAApB,UAAqB,KAAU,EAAE,QAAwB;QACvD,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE;YACzC,OAAO,KAAK,CAAA;SACb;QAED,QAAQ,QAAQ,CAAC,IAAI;YACnB,KAAK,OAAO;gBACV,OAAO,CAAC,CAAC,KAAK,CAAA;YAChB,KAAK,UAAU,CAAC;YAChB,KAAK,IAAI,CAAC;YACV,KAAK,WAAW,CAAC;YACjB,KAAK,0BAA0B,CAAC;YAChC,KAAK,6BAA6B;gBAChC,OAAO,OAAO,KAAK,KAAK,QAAQ,GAAG,IAAI,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,GAAG,KAAK,CAAA;YACvE,KAAK,MAAM;gBACT,OAAO,gBAAgB,CAAC,KAAK,CAAC,CAAA;YAChC,KAAK,MAAM;gBACT,OAAO,OAAO,KAAK,KAAK,QAAQ,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,cAAc,EAAE,GAAG,KAAK,CAAC,cAAc,EAAE,CAAA;YAC9F,KAAK,MAAM;gBACT,OAAO,KAAK,CAAA;YACd,KAAK,KAAK,CAAC;YACX,KAAK,cAAc;gBACjB,OAAO,OAAO,KAAK,KAAK,QAAQ,GAAG,mBAAmB,CAAC,KAAK,CAAC,GAAG,KAAK,CAAA;YACvE,KAAK,MAAM,CAAC;YACZ,KAAK,aAAa;gBAChB,OAAO,OAAO,KAAK,KAAK,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,KAAK,CAAA;YAC9D,KAAK,MAAM,CAAC;YACZ,KAAK,aAAa;gBAChB,IAAI,QAAQ,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE;oBAC5F,OAAO,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA;iBAC3B;gBACD,OAAO,KAAK,CAAA;YACd;gBACE,OAAO,KAAK,CAAA;SACf;KACF;IAES,8CAAc,GAAxB,UAAyB,KAAa,EAAE,UAAiB;QACvD,IAAM,eAAe,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;QAClC,IAAI,cAAc,GAAG,EAAE,CAAA;QACvB,IAAI,YAAY,GAAG,IAAI,CAAA;QACvB,IAAI,QAAQ,GAAG,CAAC,CAAA;QAChB,IAAI,SAAS,GAAG,CAAC,CAAA;QAEjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YACxC,IAAM,gBAAgB,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;YACjC,IAAM,uBAAuB,GAAG,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,CAAA;YAEhE,IAAI,gBAAgB,KAAK,GAAG,IAAI,CAAC,YAAY,EAAE;gBAC7C,IAAM,SAAS,GAAG,UAAW,CAAC,QAAQ,CAAC,CAAA;gBAEvC,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;;oBAE5B,IAAM,oBAAoB,GAAG,SAAS,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,KAAK,IAAK,OAAA,aAAU,SAAS,GAAG,KAAK,CAAE,GAAA,CAAC,CAAA;oBAEvF,cAAc,IAAI,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;oBACjD,SAAS,IAAI,oBAAoB,CAAC,MAAM,CAAA;iBACzC;qBAAM;oBACL,cAAc,IAAI,YAAU,SAAW,CAAA;oBACvC,SAAS,IAAI,CAAC,CAAA;iBACf;gBACD,QAAQ,IAAI,CAAC,CAAA;aACd;iBAAM;gBACL,cAAc,IAAI,gBAAgB,CAAA;gBAElC,IAAI,eAAe,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,uBAAuB,EAAE;oBAC1E,IAAI,CAAC,YAAY,EAAE;wBACjB,YAAY,GAAG,gBAAgB,CAAA;qBAChC;yBAAM,IAAI,YAAY,KAAK,gBAAgB,EAAE;wBAC5C,YAAY,GAAG,IAAI,CAAA;qBACpB;iBACF;aACF;SACF;QAED,OAAO,cAAc,CAAA;KACtB;IAES,mDAAmB,GAA7B,UAA8B,UAAkB;QAC9C,IAAI,CAAC,UAAU,EAAE;YACf,OAAO,UAAU,CAAA;SAClB;QAED,IAAM,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAA;QAEjE,OAAO,kBAAkB,CAAC,GAAG,CAAC,UAAC,SAAS,EAAE,KAAK;YAC7C,IAAI,SAAS,KAAK,SAAS,EAAE;gBAC3B,OAAO,SAAS,CAAA;aACjB;YAED,IAAI,OAAO,SAAS,KAAK,QAAQ,IAAI,QAAO,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,CAAA,KAAK,WAAW,EAAE;gBAC5E,mBACE,IAAI,EAAE,WAAS,KAAO,IACnB,SAAS,GACZ;aACH;YAED,OAAO;gBACL,IAAI,EAAE,WAAS,KAAO;gBACtB,KAAK,EAAE,SAAS;aACjB,CAAA;SACF,CAAC,CAAA;KACH;IAES,qDAAqB,GAA/B,UAAgC,UAAiB;QAC/C,OAAO,UAAU,CAAC,MAAM,CACtB,UAAC,kBAAkB,EAAE,SAAS;YAC5B,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;gBAC5B,kBAAkB,CAAC,IAAI,OAAvB,kBAAkB,EAAS,SAAS,EAAC;aACtC;iBAAM;gBACL,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;aACnC;YACD,OAAO,kBAAkB,CAAA;SAC1B,EAAE,EAAE,CACN,CAAA;KACF;IACH,4BAAC;CAxKD,CAA2C,gBAAgB;;;ICPb,4CAAgB;IAA9D;;KA4LC;IA3LQ,yDAAsB,GAA7B,UAA8B,KAAS,EAAE,QAAwB;QAC/D,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,KAAK,CAAA;SACb;QAED,QAAQ,QAAQ,CAAC,IAAI;YACnB,KAAK,MAAM;gBACT,OAAO;oBACL,KAAK,EAAE,gBAAgB,CAAC,KAAK,CAAC;oBAC9B,IAAI,EAAE,MAAM;iBACb,CAAA;YACH,KAAK,MAAM;gBACT,OAAO;oBACL,KAAK,EAAE,gBAAgB,CAAC,KAAK,CAAC;oBAC9B,IAAI,EAAE,MAAM;iBACb,CAAA;YACH,KAAK,qBAAqB;gBACxB,OAAO;oBACL,KAAK,EAAE,gBAAgB,CAAC,KAAK,CAAC;oBAC9B,IAAI,EAAE,qBAAqB;iBAC5B,CAAA;YACH,KAAK,QAAQ;gBACX,OAAO;oBACL,KAAK,EAAE,gBAAgB,CAAC,KAAK,CAAC;oBAC9B,IAAI,EAAE,QAAQ;iBACf,CAAA;YACH,KAAK,UAAU;gBACb,OAAO;oBACL,KAAK,OAAA;oBACL,IAAI,EAAE,UAAU;iBACjB,CAAA;YACH,KAAK,WAAW,CAAC;YACjB,KAAK,UAAU,CAAC;YAChB,KAAK,0BAA0B,CAAC;YAChC,KAAK,aAAa;gBAChB,OAAO;oBACL,KAAK,EAAE,oBAAoB,CAAC,KAAK,CAAC;oBAClC,IAAI,EAAE,WAAW;iBAClB,CAAA;YACH,KAAK,SAAS,CAAC;YACf,KAAK,SAAS;gBACZ,OAAO;oBACL,KAAK,EAAE,EAAE,GAAG,KAAK;oBACjB,IAAI,EAAE,cAAc,CAAC,QAAQ,CAAC;iBAC/B,CAAA;YACH,KAAK,cAAc;gBACjB,OAAO;oBACL,KAAK,EAAE,mBAAmB,CAAC,KAAK,CAAC;iBAClC,CAAA;YACH,KAAK,aAAa,CAAC;YACnB,KAAK,MAAM,CAAC;YACZ,KAAK,OAAO;gBACV,OAAO;oBACL,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;oBAC5B,IAAI,EAAE,MAAM;iBACb,CAAA;YACH,KAAK,MAAM;gBACT,OAAO;oBACL,KAAK,EAAE,EAAE,GAAG,KAAK;oBACjB,IAAI,EAAE,MAAM;iBACb,CAAA;YACH,KAAK,aAAa,CAAC;YACnB,KAAK,MAAM;gBACT,OAAO;oBACL,KAAK,EAAE,EAAE,GAAG,KAAK;oBACjB,IAAI,EAAE,QAAQ,CAAC,QAAQ,IAAO,QAAQ,CAAC,cAAc,CAAC,SAAS,SAAI,QAAQ,CAAC,YAAY,CAAC,WAAW,EAAE,UAAO;iBAC9G,CAAA;YACH;gBACE,OAAO;oBACL,KAAK,OAAA;iBACN,CAAA;SACJ;KACF;IAED,uDAAoB,GAApB,UAAqB,KAAU,EAAE,QAAwB;QACvD,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE;YACzC,OAAO,KAAK,CAAA;SACb;QAED,QAAQ,QAAQ,CAAC,IAAI;YACnB,KAAK,OAAO;gBACV,OAAO,CAAC,CAAC,KAAK,CAAA;YAChB,KAAK,UAAU,CAAC;YAChB,KAAK,IAAI,CAAC;YACV,KAAK,WAAW,CAAC;YACjB,KAAK,0BAA0B,CAAC;YAChC,KAAK,6BAA6B,CAAC;YACnC,KAAK,aAAa;gBAChB,OAAO,OAAO,KAAK,KAAK,QAAQ,GAAG,IAAI,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,GAAG,KAAK,CAAA;YACvE,KAAK,MAAM;gBACT,OAAO,gBAAgB,CAAC,KAAK,CAAC,CAAA;YAChC,KAAK,MAAM;gBACT,OAAO,KAAK,CAAA;YACd,KAAK,QAAQ;gBACX,IAAI,QAAQ,CAAC,UAAU,KAAK,QAAQ,EAAE;oBACpC,IAAM,gBAAc,GAAG,UAAC,GAAW,IAAK,OAAA,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,CAAC,CAAC,GAAA,CAAC,GAAA,CAAA;oBACxE,IAAM,MAAM,GAAG,2EAA2E,CAAA;oBAC1F,IAAM,QAAM,GAAQ,EAAE,CAAC;oBACvB,CAAA,KAAG,KAAO,EAAC,OAAO,CAAC,MAAM,EAAE,UAAC,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,WAAW;wBACxD,QAAM,CAAC,gBAAc,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,GAAG,IAAI,GAAG,gBAAc,CAAC,WAAW,CAAC,CAAA;wBAC5E,OAAO,EAAE,CAAA;qBACV,CAAC,CAAA;oBACF,OAAO,QAAM,CAAA;iBACd;gBACD,OAAO,KAAK,CAAA;YACd,KAAK,cAAc;gBACjB,OAAO,OAAO,KAAK,KAAK,QAAQ,GAAG,mBAAmB,CAAC,KAAK,CAAC,GAAG,KAAK,CAAA;YACvE,KAAK,MAAM,CAAC;YACZ,KAAK,aAAa,CAAC;YACnB,KAAK,OAAO;gBACV,OAAO,OAAO,KAAK,KAAK,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,KAAK,CAAA;YAC9D,KAAK,MAAM,CAAC;YACZ,KAAK,aAAa;gBAChB,IAAI,QAAQ,CAAC,OAAO,EAAE;;oBAEpB,KAAK,GAAG,KAAK,KAAK,IAAI,GAAI,KAAgB,CAAC,MAAM,CAAC,CAAC,EAAG,KAAgB,CAAC,MAAM,GAAG,CAAC,CAAC;yBAC/E,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAA;;oBAElB,OAAO,KAAK,CAAC,GAAG,CAAC,UAAC,GAAW,IAAK,QAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,IAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,IAAC,CAAC,CAAA;iBACrI;;gBAED,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,IAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,KAAK,CAAA;YAEhH;gBACE,OAAO,KAAK,CAAA;SACf;KACF;IAES,iDAAc,GAAxB,UAAyB,KAAa;QACpC,IAAM,eAAe,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;QAClC,IAAI,cAAc,GAAG,EAAE,CAAA;QACvB,IAAI,YAAY,GAAG,IAAI,CAAA;QAEvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YACxC,IAAM,gBAAgB,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;YACjC,IAAM,uBAAuB,GAAG,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,CAAA;YAEhE,IAAI,gBAAgB,KAAK,GAAG,IAAI,CAAC,YAAY,EAAE;gBAC7C,cAAc,IAAI,SAAS,CAAA;aAC5B;iBAAM;gBACL,cAAc,IAAI,gBAAgB,CAAA;gBAElC,IAAI,eAAe,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,uBAAuB,EAAE;oBAC1E,IAAI,CAAC,YAAY,EAAE;wBACjB,YAAY,GAAG,gBAAgB,CAAA;qBAChC;yBAAM,IAAI,YAAY,KAAK,gBAAgB,EAAE;wBAC5C,YAAY,GAAG,IAAI,CAAA;qBACpB;iBACF;aACF;SACF;QAED,OAAO,cAAc,CAAA;KACtB;IAES,sDAAmB,GAA7B,UAA8B,UAAkB;QAAhD,iBA+BC;QA9BC,IAAI,CAAC,UAAU,EAAE;YACf,OAAO,UAAU,CAAA;SAClB;QAED,OAAO,UAAU,CAAC,GAAG,CAAC,UAAC,SAAS,EAAE,KAAK;;YACrC,IAAI,SAAS,KAAK,SAAS,EAAE;gBAC3B,OAAO,SAAS,CAAA;aACjB;YAED,IAAI,OAAO,SAAS,KAAK,QAAQ,IAAI,QAAO,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,CAAA,KAAK,WAAW,EAAE;gBAC5E,mBACE,IAAI,EAAE,YAAS,KAAK,GAAG,CAAC,CAAE,IACvB,SAAS,GACZ;aACH;;YAGD,IAAI,OAAA,KAAI,CAAC,gBAAgB,0CAAE,cAAc,KAAI,+EAA+E,CAAC,IAAI,CAAC,EAAE,GAAG,SAAS,CAAC,EAAE;gBACjJ,OAAO;oBACL,IAAI,EAAE,YAAS,KAAK,GAAG,CAAC,CAAE;oBAC1B,KAAK,EAAE,EAAE,GAAG,SAAS;oBACrB,IAAI,EAAE,MAAM;iBACb,CAAA;aACF;YAED,OAAO;gBACL,IAAI,EAAE,YAAS,KAAK,GAAG,CAAC,CAAE;gBAC1B,KAAK,EAAE,SAAS;aACjB,CAAA;SACF,CAAC,CAAA;KACH;IACH,+BAAC;CA5LD,CAA8C,gBAAgB;;ACC9D;IAKE,uBACmB,MAAc,EACd,SAAiB,EACjB,WAAmB,EACnB,QAAgB,EAChB,QAAuE,EACvE,gBAAkC,EAClC,oBAA0B,EAC1B,aAAmB,EACnB,kBAAuD;QAJvD,yBAAA,EAAA,yBAA8D,OAAA,SAAS,GAAA;QAJvE,WAAM,GAAN,MAAM,CAAQ;QACd,cAAS,GAAT,SAAS,CAAQ;QACjB,gBAAW,GAAX,WAAW,CAAQ;QACnB,aAAQ,GAAR,QAAQ,CAAQ;QAChB,aAAQ,GAAR,QAAQ,CAA+D;QACvE,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,yBAAoB,GAApB,oBAAoB,CAAM;QAC1B,kBAAa,GAAb,aAAa,CAAM;QACnB,uBAAkB,GAAlB,kBAAkB,CAAqC;QAExE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAA;QAC1B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAA;QAC9B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;QACxB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;QACxB,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,IAAI,EAAE,CAAA;QACtD,IAAI,CAAC,oBAAoB,CAAC,MAAM,GAAG,MAAM,CAAA;QACzC,IAAI,CAAC,MAAM,GAAGC,aAAmB,CAAC;YAChC,SAAS,WAAA;YACT,WAAW,aAAA;YACX,QAAQ,UAAA;YACR,OAAO,EAAE,IAAI,CAAC,oBAAoB;YAClC,aAAa,eAAA;SACd,CAAC,CAAA;QACF,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAA;QACxC,IAAI,CAAC,kBAAkB,GAAG,oBAAoB,aAApB,oBAAoB,uBAApB,oBAAoB,CAAE,kBAAkB,CAAA;KACnE;IAEY,6BAAK,GAAlB,UAAmB,KAAa,EAAE,UAAkB;;;;;;;wBAC5C,oBAAoB,GAAG,IAAI,CAAC,gBAAgB,CAAC,2BAA2B,CAAC,KAAK,EAAE,UAAU,CAAC,CAAA;wBAEjG,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,WAAW,EAAE,oBAAoB,CAAC,UAAU,CAAC,CAAA;wBAEnE,qBAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;gCACnC,GAAG,EAAE,oBAAoB,CAAC,WAAW;gCACrC,UAAU,EAAE,oBAAoB,CAAC,UAAU;gCAC3C,aAAa,EAAE,IAAI,CAAC,aAAa;gCACjC,oBAAoB,cAAE,IAAI,CAAC,kBAAkB,0CAAE,oBAAoB,mCAAI,KAAK;6BAC7E,CAAC;;0BAAA;;wBALE,MAAM,GAAG,SAKX;;wBAGF,IAAI,MAAM,CAAC,OAAO,EAAE;4BAClB,MAAM,GAAG,MAAM,CAAC,OAAO,CAAA;4BACvB,MAAM,CAAC,OAAO,GAAG,MAAM,CAAA;yBACxB;wBAED,sBAAO,MAAM,EAAA;;;;KACd;IAEM,8CAAsB,GAA7B,UAA8B,KAAU,EAAE,cAA8B;QACtE,OAAO,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,KAAK,EAAE,cAAc,CAAC,CAAA;KAC3E;IAEM,4CAAoB,GAA3B,UAA4B,KAAU,EAAE,cAA8B;QACpE,OAAO,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,KAAK,EAAE,cAAc,CAAC,CAAA;KACzE;IAEY,wCAAgB,GAA7B;;;;;4BAC4B,qBAAM,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,EAAA;;wBAAtD,aAAa,GAAK,CAAA,SAAoC,eAAzC;wBACrB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAA;;;;;KACnC;IAEY,yCAAiB,GAA9B;;;;4BACE,qBAAM,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,EAAA;;wBAA1E,SAA0E,CAAA;wBAC1E,IAAI,CAAC,aAAa,GAAG,SAAS,CAAA;;;;;KAC/B;IAEY,2CAAmB,GAAhC;;;;4BACE,qBAAM,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,EAAA;;wBAA5E,SAA4E,CAAA;wBAC5E,IAAI,CAAC,aAAa,GAAG,SAAS,CAAA;;;;;KAC/B;IACH,oBAAC;CAAA,IAAA;AAED,IAAM,iBAAiB,GAAG,UAAC,MAAc,EAAE,SAAiB,EAAE,WAAmB,EAAE,QAAgB,EACjG,QAAuE,EACvE,oBAA0B,EAAE,aAAmB;IAD/C,yBAAA,EAAA,yBAA8D,OAAA,SAAS,GAAA;IACnB,OAAA,IAAI,aAAa,CACrE,MAAM,EACN,SAAS,EACT,WAAW,EACX,QAAQ,EACR,QAAQ,EACR,IAAI,qBAAqB,CAAC,EAAE,cAAc,EAAE,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,cAAc,EAAE,CAAC,EAC5E,oBAAoB,EACpB,aAAa,CACd;CAAA,CAAA;AAED,AAEA,IAAM,oBAAoB,GAAG,UAAC,MAAc,EAAE,SAAiB,EAAE,WAAmB,EAAE,QAAgB,EACpG,QAAuE,EACvE,oBAA0B,EAAE,aAAmB;IAD/C,yBAAA,EAAA,yBAA8D,OAAA,SAAS,GAAA;IACnB,OAAA,IAAI,aAAa,CACrE,MAAM,EACN,SAAS,EACT,WAAW,EACX,QAAQ,EACR,QAAQ,EACR,IAAI,wBAAwB,CAAC,EAAE,cAAc,EAAE,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,cAAc,EAAE,CAAC,EAC/E,oBAAoB,EACpB,aAAa,CACd;CAAA,CAAA;AAED,IAAa,EAAE,GAAG,oBAAoB;;;;;"}