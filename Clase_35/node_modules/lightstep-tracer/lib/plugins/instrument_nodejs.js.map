{"version":3,"sources":["../../src/plugins/instrument_nodejs.js"],"names":[],"mappings":"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","file":"instrument_nodejs.js","sourcesContent":["import * as opentracing from 'opentracing';\nimport http from 'http';\nimport https from 'https';\nimport urlCreator, { URL } from 'url';\n// Capture the proxied values on script load (i.e. ASAP) in case there are\n// multiple layers of instrumentation.\nlet proxiedHttpRequest;\nlet proxiedHttpsRequest;\nlet proxiedHttpGet;\nlet proxiedHttpsGet;\nif (typeof window === 'undefined') {\n    proxiedHttpRequest = http.request;\n    proxiedHttpGet = http.get;\n\n    proxiedHttpsRequest = https.request;\n    proxiedHttpsGet = https.get;\n}\n\n\n// taken from following\n// https://github.com/nodejs/node/blob/8507485fb242dfcaf07092414871aa9c185a28e4/lib/internal/url.js#L1254-L1276\n// Utility function that converts a URL object into an ordinary\n// options object as expected by the http.request and https.request\n// APIs.\nfunction urlToOptions(url) {\n    const options = {\n        protocol : url.protocol,\n        hostname :\n            typeof url.hostname === 'string' && url.hostname.startsWith('[')\n                ? url.hostname.slice(1, -1)\n                : url.hostname,\n        hash     : url.hash,\n        search   : url.search,\n        pathname : url.pathname,\n        path     : `${url.pathname || ''}${url.search || ''}`,\n        href     : url.href,\n    };\n    if (url.port !== '') {\n        options.port = Number(url.port);\n    }\n    if (url.username || url.password) {\n        options.auth = `${url.username}:${url.password}`;\n    }\n    return options;\n}\n\n// Automatically create spans for all requests made via window.fetch.\n//\n// NOTE: this code currently works only with a single Tracer.\n//\nclass InstrumentNodejs {\n    constructor() {\n        this._enabled = this._isValidContext();\n        this._proxyInited = false;\n        this._internalExclusions = [];\n        this._tracer = null;\n        this._handleOptions = this._handleOptions.bind(this);\n    }\n\n    name() {\n        return 'instrument_nodejs';\n    }\n\n    addOptions(tracerImp) {\n        tracerImp.addOption('nodejs_instrumentation', { type : 'bool', defaultValue : false });\n        tracerImp.addOption('nodejs_url_inclusion_patterns', { type : 'array', defaultValue : [/.*/] });\n        tracerImp.addOption('nodejs_url_exclusion_patterns', { type : 'array', defaultValue : [] });\n        tracerImp.addOption('include_cookies', { type : 'bool', defaultValue : true });\n    }\n\n    start(tracerImp) {\n        if (!this._enabled) {\n            return;\n        }\n        this._tracer = tracerImp;\n\n        let currentOptions = tracerImp.options();\n        this._addServiceHostToExclusions(currentOptions);\n        this._handleOptions({}, currentOptions);\n        tracerImp.on('options', this._handleOptions);\n    }\n\n    stop() {\n        if (!this._enabled) {\n            return;\n        }\n        http.request = proxiedHttpRequest;\n        http.get = proxiedHttpGet;\n\n        https.request = proxiedHttpsRequest;\n        https.get = proxiedHttpsGet;\n    }\n\n    /**\n     * Respond to options changes on the Tracer.\n     *\n     * Note that `modified` is the options that have changed in this call,\n     * along with their previous and new values. `current` is the full set of\n     * current options *including* the newly modified values.\n     */\n    _handleOptions(modified, current) {\n        // Automatically add the service host itself to the list of exclusions\n        // to avoid reporting on the reports themselves\n        let serviceHost = modified.collector_host;\n        if (serviceHost) {\n            this._addServiceHostToExclusions(current);\n        }\n\n        // Set up the proxied fetch calls unless disabled\n        if (!this._proxyInited && current.nodejs_instrumentation) {\n            this._proxyInited = true;\n            this._instrumentNodejs();\n        }\n    }\n\n    /**\n     * Ensure that the reports to the collector don't get instrumented as well,\n     * as that recursive instrumentation is more confusing than valuable!\n     */\n    _addServiceHostToExclusions(opts) {\n        if (opts.collector_host.length === 0) {\n            return;\n        }\n\n        // http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\n        function escapeRegExp(str) {\n            return (`${str}`).replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n        }\n\n        // Check against the hostname without the port as well as the canonicalized\n        // URL may drop the standard port.\n        let host = escapeRegExp(opts.collector_host);\n        let port = escapeRegExp(opts.collector_port);\n        let set = [new RegExp(`^https?://${host}:${port}`)];\n        if (port === '80') {\n            set.push(new RegExp(`^http://${host}`));\n        } else if (port === '443') {\n            set.push(new RegExp(`^https://${host}`));\n        }\n        this._internalExclusions = set;\n    }\n\n    /**\n     * Check if in node\n     */\n    _isValidContext() {\n        const isNode = (typeof process !== 'undefined')\n            && (typeof process.release !== 'undefined')\n            && (process.release.name === 'node');\n        return isNode;\n    }\n\n    _instrumentNodejs() {\n        let self = this;\n        let tracer = this._tracer;\n\n        function requestOverride(originalRequest, ...args) {\n            // http.request has two overrides, taking url/string first, or options\n            // if url or string morph into an options object,\n            // make it so that options and possible callback are only args passed\n            let options;\n            let callback;\n            let urlObject;\n            /* eslint-disable prefer-destructuring */\n            if (typeof args[0] === 'string' || args[0] instanceof URL) {\n                urlObject = args[0] instanceof URL ? args[0] : new URL(args[0]);\n                options = urlToOptions(urlObject);\n                if (typeof args[1] === 'object') {\n                    options = { ...options, ...args[1] };\n                    callback = args[2];\n                } else if (typeof args[1] === 'function') {\n                    callback = args[1];\n                }\n            } else {\n                options = args[0];\n                callback = args[1];\n            }\n            /* eslint-enable prefer-destructuring */\n\n            // check if there are headers stated, and if not create them on the first arg\n            // then grab reference so that we can inject headers into the request before sending the request out\n            if (!options.headers) options.headers = {};\n\n            const { headers } = options;\n            const method = options.method || 'GET';\n            const url = options.href || urlCreator.format(options);\n            const protocol = options.protocol\n                ? options.protocol.replace(':', '')\n                : url.slice(0, url.indexOf(':'));\n            if (!self._shouldTrace(tracer, url)) {\n                return originalRequest(...args);\n            }\n\n            const span = tracer.startSpan('node request');\n            tracer.addActiveRootSpan(span);\n\n            let tags = {\n                method   : method || 'GET',\n                url      : url,\n                protocol : protocol,\n            };\n            if (url) {\n                // eslint-disable-next-line prefer-destructuring\n                tags.url_pathname = url.split('?')[0];\n            }\n\n\n            try {\n                const headersCarrier = {};\n                tracer.inject(span.context(), opentracing.FORMAT_HTTP_HEADERS, headersCarrier);\n                const keys = Object.keys(headersCarrier);\n                // add tracing headers to request\n                // have to set headers instead of modifying the request instance headers,\n                // In an http.get call case, req.end will automatically be called,\n                // setting headers will be impossible after that point\n                // reference https://nodejs.org/api/http.html#http_class_http_clientrequest\n                keys.forEach((key) => {\n                    headers[key] = headersCarrier[key];\n                });\n                const request = originalRequest(options, callback);\n\n                span.log({\n                    event       : 'sending',\n                    method      : method || 'GET',\n                    url         : url,\n                    openPayload : tags,\n                });\n                span.addTags(tags);\n\n                request.on('response', (res) => {\n                    if (res.statusCode >= 500 && res.statusCode <= 599) {\n                        span.addTags({ error : true });\n                    }\n                    span.log({\n                        method       : method || 'GET',\n                        headers      : res.headers,\n                        status       : res.status,\n                        statusText   : res.statusText,\n                        responseType : res.type,\n                        url          : res.url,\n                    });\n                    span.finish();\n                    tracer.removeActiveRootSpan(span);\n                });\n\n                return request;\n            } catch (e) {\n                span.addTags({ error : true });\n                tracer.removeActiveRootSpan(span);\n                span.log({\n                    event : 'error',\n                    error : e,\n                });\n                span.finish();\n                throw e;\n            }\n        }\n\n        http.request = requestOverride.bind(undefined, http.request);\n        https.request = requestOverride.bind(undefined, https.request);\n\n        http.get = requestOverride.bind(undefined, http.get);\n        https.get = requestOverride.bind(undefined, https.get);\n    }\n\n    _shouldTrace(tracer, url) {\n        // This shouldn't be possible, but let's be paranoid\n        if (!tracer || !url) {\n            return false;\n        }\n\n        let opts = tracer.options();\n        if (opts.disabled || !opts.nodejs_instrumentation) {\n            return false;\n        }\n\n        if (this._internalExclusions.some((ex) => ex.test(url))) {\n            return false;\n        }\n\n        let include = false;\n        if (opts.nodejs_url_inclusion_patterns.some((inc) => inc.test(url))) {\n            include = true;\n        }\n        if (opts.nodejs_url_exclusion_patterns.some((ex) => ex.test(url))) {\n            include = false;\n        }\n        return include;\n    }\n}\n\nmodule.exports = new InstrumentNodejs();\n"]}