{"version":3,"sources":["../../src/plugins/log_to_console.js"],"names":[],"mappings":";;;;;;AAAA,IAAM,YAAY,QAAQ,cAAR,CAAlB;;IAEM,Y;AACF,aADE,YACF,GAAc;AAAA,8BADZ,YACY;;AACV,aAAK,QAAL,GAAgB,KAAhB;AACA,aAAK,OAAL,GAAe,IAAf;AACA,aAAK,UAAL,GAAkB,KAAK,cAAL,CAAoB,IAApB,CAAyB,IAAzB,CAAlB;AACA,aAAK,WAAL,GAAmB,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAAnB;AACH;;iBANC,Y;;+BAQK;AACH,mBAAO,gBAAP;AACH;;;mCAEU,S,EAAW;AAClB,sBAAU,SAAV,CAAoB,gBAApB,EAAsC;AAClC,sBAAe,MADmB;AAElC,8BAAe;AAFmB,aAAtC;AAIA,sBAAU,EAAV,CAAa,SAAb,EAAwB,KAAK,UAA7B;AACH;;;8BAEK,M,EAAQ,S,EAAW;AACrB,iBAAK,OAAL,GAAe,MAAf;AACH;;;+BAEM;AACH,iBAAK,OAAL,CAAa,cAAb,CAA4B,SAA5B,EAAuC,KAAK,UAA5C;AACH;;;uCAEc,Q,EAAU,O,EAAS,S,EAAW;AACzC,gBAAI,UAAU,QAAQ,cAAtB;AACA,gBAAI,KAAK,QAAL,KAAkB,OAAtB,EAA+B;AAC3B;AACH;AACD,iBAAK,QAAL,GAAgB,OAAhB;AACA,gBAAI,KAAK,QAAT,EAAmB;AACf,0BAAU,EAAV,CAAa,WAAb,EAA0B,KAAK,WAA/B;AACH,aAFD,MAEO;AACH,0BAAU,cAAV,CAAyB,WAAzB,EAAsC,KAAK,WAA3C;AACH;AACJ;;;wCAEe,M,EAAQ;AACpB,gBAAI,QAAQ,UAAU,mBAAV,CAA8B,OAAO,KAArC,CAAZ;AADoB,gBAEd,OAFc,GAEF,MAFE,CAEd,OAFc;;AAIpB;;AACA,gBAAI,CAAC,OAAL,EAAc;AACV;AACH;;AAED,gBAAI,UAAU,OAAO,YAArB;AACA,gBAAI,OAAJ,EAAa;AACT,oBAAI;AACA,8BAAU,KAAK,KAAL,CAAW,OAAX,CAAV;AACH,iBAFD,CAEE,OAAO,QAAP,EAAiB,CAAE,aAAe;AACvC;;AAED,oBAAQ,KAAR;AACA,qBAAK,UAAU,SAAf;AACA,qBAAK,UAAU,SAAf;AACI,wBAAI,YAAY,SAAhB,EAA2B;AACvB,gCAAQ,KAAR,CAAc,OAAd,EAAuB,OAAvB,EADuB,CACU;AACpC,qBAFD,MAEO;AACH,gCAAQ,KAAR,CAAc,OAAd,EADG,CACqB;AAC3B;AACD;AACJ,qBAAK,UAAU,QAAf;AACI,wBAAI,YAAY,SAAhB,EAA2B;AACvB,gCAAQ,IAAR,CAAa,OAAb,EAAsB,OAAtB,EADuB,CACS;AACnC,qBAFD,MAEO;AACH,gCAAQ,IAAR,CAAa,OAAb,EADG,CACoB;AAC1B;AACD;AACJ,qBAAK,UAAU,QAAf;AACA;AACI,wBAAI,YAAY,SAAhB,EAA2B;AACvB,gCAAQ,GAAR,CAAY,OAAZ,EAAqB,OAArB,EADuB,CACQ;AAClC,qBAFD,MAEO;AACH,gCAAQ,GAAR,CAAY,OAAZ,EADG,CACmB;AACzB;AACD;AAvBJ;AAyBH;;;WAlFC,Y;;;AAqFN,OAAO,OAAP,GAAiB,IAAI,YAAJ,EAAjB","file":"log_to_console.js","sourcesContent":["const constants = require('../constants');\n\nclass LogToConsole {\n    constructor() {\n        this._enabled = false;\n        this._tracer = null;\n        this._optionsCb = this._handleOptions.bind(this);\n        this._logAddedCb = this._handleLogAdded.bind(this);\n    }\n\n    name() {\n        return 'log_to_console';\n    }\n\n    addOptions(tracerImp) {\n        tracerImp.addOption('log_to_console', {\n            type         : 'bool',\n            defaultValue : false,\n        });\n        tracerImp.on('options', this._optionsCb);\n    }\n\n    start(tracer, tracerImp) {\n        this._tracer = tracer;\n    }\n\n    stop() {\n        this._tracer.removeListener('options', this._optionsCb);\n    }\n\n    _handleOptions(modified, current, tracerImp) {\n        let enabled = current.log_to_console;\n        if (this._enabled === enabled) {\n            return;\n        }\n        this._enabled = enabled;\n        if (this._enabled) {\n            tracerImp.on('log_added', this._logAddedCb);\n        } else {\n            tracerImp.removeListener('log_added', this._logAddedCb);\n        }\n    }\n\n    _handleLogAdded(record) {\n        let level = constants.LOG_STRING_TO_LEVEL[record.level];\n        let { message } = record;\n\n        // Ignore records without a message (e.g. a stable_name log record)\n        if (!message) {\n            return;\n        }\n\n        let payload = record.payload_json;\n        if (payload) {\n            try {\n                payload = JSON.parse(payload);\n            } catch (_ignored) { /* ignored */ }\n        }\n\n        switch (level) {\n        case constants.LOG_ERROR:\n        case constants.LOG_FATAL:\n            if (payload !== undefined) {\n                console.error(message, payload); // eslint-disable-line no-console\n            } else {\n                console.error(message); // eslint-disable-line no-console\n            }\n            break;\n        case constants.LOG_WARN:\n            if (payload !== undefined) {\n                console.warn(message, payload); // eslint-disable-line no-console\n            } else {\n                console.warn(message); // eslint-disable-line no-console\n            }\n            break;\n        case constants.LOG_INFO:\n        default:\n            if (payload !== undefined) {\n                console.log(message, payload); // eslint-disable-line no-console\n            } else {\n                console.log(message); // eslint-disable-line no-console\n            }\n            break;\n        }\n    }\n}\n\nmodule.exports = new LogToConsole();\n"]}