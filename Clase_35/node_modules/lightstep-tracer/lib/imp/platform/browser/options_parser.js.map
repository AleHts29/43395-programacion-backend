{"version":3,"sources":["../../../../src/imp/platform/browser/options_parser.js"],"names":[],"mappings":";;AAAA,IAAM,OAAO,QAAQ,QAAR,CAAb;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI,oBAAqB,YAAY;AACjC;AACA;AACA,QAAI,OAAO,iBAAP,KAA6B,WAA7B,IAA4C,gBAAgB,iBAAhE,EAAmF;AAC/E,eAAO,IAAP;AACH;AACD,QAAI,CAAC,KAAK,SAAL,EAAL,EAAuB;AACnB,eAAO,IAAP;AACH;AACD,QAAI,UAAU,SAAS,oBAAT,CAA8B,QAA9B,CAAd;AACA,QAAI,EAAE,QAAQ,MAAR,GAAiB,CAAnB,CAAJ,EAA2B;AACvB,eAAO,IAAP;AACH;AACD,WAAO,QAAQ,QAAQ,MAAR,GAAiB,CAAzB,CAAP;AACH,CAdwB,EAAzB;;AAgBA,SAAS,kBAAT,CAA4B,QAA5B,EAAsC;AAClC,QAAI,OAAO,EAAX;AACA,QAAI,KAAK,OAAO,QAAP,CAAgB,IAAhB,CAAqB,OAArB,CAA6B,GAA7B,CAAT;AACA,QAAI,KAAK,CAAT,EAAY;AACR,eAAO,IAAP;AACH;AACD,QAAI,QAAQ,OAAO,QAAP,CAAgB,IAAhB,CAAqB,KAArB,CAA2B,KAAK,CAAhC,CAAZ;AACA,QAAI,MAAM,OAAN,CAAc,GAAd,KAAsB,CAA1B,EAA6B;AACzB,gBAAQ,MAAM,KAAN,CAAY,CAAZ,EAAe,MAAM,OAAN,CAAc,GAAd,CAAf,CAAR;AACH;AACD,QAAI,SAAS,MAAM,OAAN,CAAc,IAAd,EAAoB,KAApB,EAA2B,KAA3B,CAAiC,GAAjC,CAAb;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACpC,YAAI,OAAO,OAAO,CAAP,EAAU,KAAV,CAAgB,GAAhB,CAAX;AACA,aAAK,mBAAmB,KAAK,CAAL,CAAnB,CAAL,IAAoC,mBAAmB,KAAK,CAAL,CAAnB,CAApC;AACH;AACD,WAAO,IAAP;AACH;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,yBAAT,CAAmC,IAAnC,EAAyC,WAAzC,EAAsD;AAClD,QAAI,CAAC,iBAAL,EAAwB;AACpB;AACH;;AAHiD,QAK5C,OAL4C,GAKhC,iBALgC,CAK5C,OAL4C;;;AAOlD,QAAI,cAAc,QAAQ,YAA1B;AACA,QAAI,OAAO,WAAP,KAAuB,QAAvB,IAAmC,YAAY,MAAZ,GAAqB,CAA5D,EAA+D;AAC3D,aAAK,YAAL,GAAoB,WAApB;AACH;;AAED,QAAI,gBAAgB,QAAQ,cAA5B;AACA,QAAI,OAAO,aAAP,KAAyB,QAAzB,IAAqC,cAAc,MAAd,GAAuB,CAAhE,EAAmE;AAC/D,aAAK,cAAL,GAAsB,aAAtB;AACH;;AAED,QAAI,gBAAgB,QAAQ,cAA5B;AACA,QAAI,OAAO,aAAP,KAAyB,QAAzB,IAAqC,cAAc,MAAd,GAAuB,CAAhE,EAAmE;AAC/D,aAAK,cAAL,GAAsB,aAAtB;AACH;AACD,QAAI,gBAAgB,QAAQ,cAA5B;AACA,QAAI,aAAJ,EAAmB;AACf,aAAK,cAAL,GAAsB,SAAS,aAAT,EAAwB,EAAxB,CAAtB;AACH;AACD,QAAI,gBAAgB,QAAQ,cAA5B;AACA,QAAI,OAAO,aAAP,KAAyB,QAAzB,IAAqC,cAAc,MAAd,GAAuB,CAAhE,EAAmE;AAC/D,aAAK,cAAL,GAAsB,aAAtB;AACH;AACD,QAAI,sBAAsB,QAAQ,oBAAlC;AACA,QAAI,mBAAJ,EAAyB;AACrB,aAAK,oBAAL,GAA4B,mBAA5B;AACH;;AAhCiD,QAkC5C,MAlC4C,GAkCjC,OAlCiC,CAkC5C,MAlC4C;;AAmClD,QAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC5B,YAAI,WAAW,MAAf,EAAuB;AACnB,iBAAK,MAAL,GAAc,IAAd;AACH,SAFD,MAEO,IAAI,WAAW,OAAf,EAAwB;AAC3B,iBAAK,MAAL,GAAc,KAAd;AACH;AACJ;AAzCiD,QA0C5C,SA1C4C,GA0C9B,OA1C8B,CA0C5C,SA1C4C;;AA2ClD,QAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AAC/B,aAAK,SAAL,GAAiB,SAAS,SAAT,EAAoB,EAApB,CAAjB;AACH;;AAED,QAAI,OAAO,QAAQ,kBAAnB;AACA,QAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC1B,YAAI,SAAS,MAAb,EAAqB;AACjB,wBAAY,kBAAZ,GAAiC,IAAjC;AACH,SAFD,MAEO,IAAI,SAAS,OAAb,EAAsB;AACzB,wBAAY,kBAAZ,GAAiC,KAAjC;AACH;AACJ;;AAED;AACA;AACA,QAAI,OAAO,QAAQ,mBAAf,KAAuC,QAAvC,IAAmD,QAAQ,mBAAR,KAAgC,MAAvF,EAA+F;AAC3F,aAAK,mBAAL,GAA2B,IAA3B;AACH;;AAED,QAAI,OAAO,QAAQ,oBAAf,KAAwC,QAAxC,IAAoD,QAAQ,oBAAR,KAAiC,MAAzF,EAAiG;AAC7F,aAAK,oBAAL,GAA4B,IAA5B;AACH;AACJ;;AAED,SAAS,6BAAT,CAAuC,IAAvC,EAA6C,WAA7C,EAA0D,CAEzD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,oBAAT,CAA8B,IAA9B,EAAoC;AAChC,QAAI,SAAS,oBAAb;AACA,QAAI,OAAO,mBAAX,EAAgC;AAC5B,YAAI;AACA,iBAAK,SAAL,GAAiB,SAAS,OAAO,mBAAhB,EAAqC,EAArC,CAAjB;AACH,SAFD,CAEE,OAAO,QAAP,EAAiB,CAAE,aAAe;AACvC;AACD,QAAI,OAAO,wBAAX,EAAqC;AACjC,aAAK,cAAL,GAAsB,IAAtB;AACH;AACJ;;AAED,SAAS,wBAAT,CAAkC,IAAlC,EAAwC;AACpC,WAAO,EAAP;AACH;;AAED,OAAO,OAAP,GAAiB;AACb,+BAA4B,KAAK,SAAL,KAAmB,yBAAnB,GAA+C,6BAD9D;AAEb,0BAA4B,KAAK,SAAL,KAAmB,oBAAnB,GAA0C;AAFzD,CAAjB","file":"options_parser.js","sourcesContent":["const util = require('./util');\n\n/* global WorkerGlobalScope */\n// Find the HTML element that included the tracing library (if there is one).\n// This relies on the fact that scripts are executed as soon as they are\n// included -- thus 'this' script is the last one in the array at the time\n// this is run.\nlet hostScriptElement = (function () {\n    // check to see if we're in a webworker\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n        return null;\n    }\n    if (!util.isBrowser()) {\n        return null;\n    }\n    let scripts = document.getElementsByTagName('SCRIPT');\n    if (!(scripts.length > 0)) {\n        return null;\n    }\n    return scripts[scripts.length - 1];\n}());\n\nfunction urlQueryParameters(defaults) {\n    let vars = {};\n    let qi = window.location.href.indexOf('?');\n    if (qi < 0) {\n        return vars;\n    }\n    let slice = window.location.href.slice(qi + 1);\n    if (slice.indexOf('#') >= 0) {\n        slice = slice.slice(0, slice.indexOf('#'));\n    }\n    let hashes = slice.replace(/\\+/, '%20').split('&');\n    for (let i = 0; i < hashes.length; i++) {\n        let hash = hashes[i].split('=');\n        vars[decodeURIComponent(hash[0])] = decodeURIComponent(hash[1]);\n    }\n    return vars;\n}\n\n// Parses options out of the host <script> element. Allows for easy configuration\n// via the HTML element. Example:\n//\n// <script src='lightstep.min.js'\n//      data-access_token='{my_access_token}'\n//      data-component_name='my_component'></script>\n//\n// Note: relies on the global hostScriptElement variable defined above.\n//\nfunction parseScriptElementOptions(opts, browserOpts) {\n    if (!hostScriptElement) {\n        return;\n    }\n\n    let { dataset } = hostScriptElement;\n\n    let accessToken = dataset.access_token;\n    if (typeof accessToken === 'string' && accessToken.length > 0) {\n        opts.access_token = accessToken;\n    }\n\n    let componentName = dataset.component_name;\n    if (typeof componentName === 'string' && componentName.length > 0) {\n        opts.component_name = componentName;\n    }\n\n    let collectorHost = dataset.collector_host;\n    if (typeof collectorHost === 'string' && collectorHost.length > 0) {\n        opts.collector_host = collectorHost;\n    }\n    let collectorPort = dataset.collector_port;\n    if (collectorPort) {\n        opts.collector_port = parseInt(collectorPort, 10);\n    }\n    let collectorPath = dataset.collector_path;\n    if (typeof collectorPath === 'string' && collectorPath.length > 0) {\n        opts.collector_path = collectorPath;\n    }\n    let collectorEncryption = dataset.collector_encryption;\n    if (collectorEncryption) {\n        opts.collector_encryption = collectorEncryption;\n    }\n\n    let { enable } = dataset;\n    if (typeof enable === 'string') {\n        if (enable === 'true') {\n            opts.enable = true;\n        } else if (enable === 'false') {\n            opts.enable = false;\n        }\n    }\n    let { verbosity } = dataset;\n    if (typeof verbosity === 'string') {\n        opts.verbosity = parseInt(verbosity, 10);\n    }\n\n    let init = dataset.init_global_tracer;\n    if (typeof init === 'string') {\n        if (init === 'true') {\n            browserOpts.init_global_tracer = true;\n        } else if (init === 'false') {\n            browserOpts.init_global_tracer = false;\n        }\n    }\n\n    // NOTE: this is a little inelegant as this is hard-coding support for a\n    // \"plug-in\" option.\n    if (typeof dataset.xhr_instrumentation === 'string' && dataset.xhr_instrumentation === 'true') {\n        opts.xhr_instrumentation = true;\n    }\n\n    if (typeof dataset.instrument_page_load === 'string' && dataset.instrument_page_load === 'true') {\n        opts.instrument_page_load = true;\n    }\n}\n\nfunction parseScriptElementOptionsNoop(opts, browserOpts) {\n\n}\n\n// Parses options out of the current URL query string. The query parameters use\n// the 'lightstep_' prefix to reduce the chance of collision with\n// application-specific query parameters.\n//\n// This mechanism is particularly useful for debugging purposes as it does not\n// require any code or configuration changes.\n//\nfunction parseURLQueryOptions(opts) {\n    let params = urlQueryParameters();\n    if (params.lightstep_verbosity) {\n        try {\n            opts.verbosity = parseInt(params.lightstep_verbosity, 10);\n        } catch (_ignored) { /* Ignored */ }\n    }\n    if (params.lightstep_log_to_console) {\n        opts.log_to_console = true;\n    }\n}\n\nfunction parseURLQueryOptionsNoop(opts) {\n    return {};\n}\n\nmodule.exports = {\n    parseScriptElementOptions : util.isBrowser() ? parseScriptElementOptions : parseScriptElementOptionsNoop,\n    parseURLQueryOptions      : util.isBrowser() ? parseURLQueryOptions : parseURLQueryOptionsNoop,\n};\n"]}