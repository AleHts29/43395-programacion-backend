{"version":3,"sources":["../../../../src/imp/platform/node/transport_httpthrift.js"],"names":[],"mappings":"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","file":"transport_httpthrift.js","sourcesContent":["import * as https from 'https';\nimport * as http from 'http';\nimport * as zlib from 'zlib';\n\nconst kMaxDetailedErrorFrequencyMs = 30000;\nconst kMaxStringLength = 2048;\n\nfunction truncatedString(s) {\n    if (!s || s.length <= kMaxStringLength) {\n        return s;\n    }\n    let half = Math.floor(kMaxStringLength / 2);\n    return `${s.substr(0, half)}...${s.substr(-half)}`;\n}\n\nfunction encodeAndTruncate(obj) {\n    try {\n        return truncatedString(JSON.stringify(obj.toThrift()));\n    } catch (exception) {\n        return exception;\n    }\n}\n\nfunction errorFromResponse(res, buffer) {\n    if (buffer && buffer.length) {\n        buffer = truncatedString(`${buffer}`.replace(/\\s+$/, ''));\n    }\n    return new Error(`status code=${res.statusCode}, message='${res.statusMessage}', body='${buffer}'`);\n}\n\nexport default class TransportHTTPThrift {\n    constructor(logger) {\n        this._host = '';\n        this._port = 0;\n        this._encryption = '';\n        this._timeoutMs = 0;\n\n        this._logger = logger;\n        this._lastLogMs = 0;\n    }\n\n    ensureConnection(opts) {\n        this._host       = opts.collector_host;\n        this._port       = opts.collector_port;\n        this._encryption = opts.collector_encryption;\n        this._timeoutMs  = opts.report_timeout_millis;\n        this._gzipJSON   = opts.gzip_json_requests;\n    }\n\n    _preparePayload(useGzip, reportRequest, cb) {\n        let payload;\n        try {\n            payload = JSON.stringify(reportRequest.toThrift());\n        } catch (exception) {\n            // This should never happen. The library should always be constructing\n            // valid reports.\n            this._error('Could not JSON.stringify report!');\n            return cb(exception);\n        }\n\n        if (useGzip) {\n            return zlib.gzip(payload, cb);\n        }\n        return cb(null, payload);\n    }\n\n    report(detached, auth, reportRequest, done) {\n        let options = {\n            hostname : this._host,\n            port     : this._port,\n            method   : 'POST',\n            path     : '/api/v0/reports',\n        };\n        let protocol = (this._encryption === 'none') ? http : https;\n        let useGzip = this._gzipJSON;\n\n        this._preparePayload(useGzip, reportRequest, (payloadErr, payload) => {\n            if (payloadErr) {\n                this._error('Error compressing payload');\n                return done(payloadErr);\n            }\n\n            let extraErrorData = [];\n            let req = protocol.request(options, (res) => {\n                let buffer = '';\n                res.on('data', (chunk) => {\n                    buffer += chunk;\n                });\n                res.on('end', () => {\n                    let err = null;\n                    let resp = null;\n                    if (res.statusCode === 400) {\n                        this._throttleLog(() => {\n                            this._warning('transport status code = 400', {\n                                code    : res.statusCode,\n                                message : res.statusMessage,\n                                body    : buffer,\n                                extra   : extraErrorData,\n                                report  : encodeAndTruncate(reportRequest),\n                            });\n                        });\n                        err = errorFromResponse(res, buffer);\n                    } else if (res.statusCode !== 200) {\n                        err = errorFromResponse(res, buffer);\n                    } else if (!buffer) {\n                        err = new Error('unexpected empty response');\n                    } else {\n                        try {\n                            resp = JSON.parse(buffer);\n                        } catch (exception) {\n                            err = exception;\n                        }\n                    }\n                    return done(err, resp);\n                });\n            });\n            req.on('socket', (socket, head) => {\n                socket.setTimeout(this._timeoutMs);\n                socket.on('timeout', () => {\n                    // abort() will generate an error, so done() is called as a\n                    // result.\n                    req.abort();\n                    extraErrorData.push(`Request timed out (${this._timeoutMs} ms)`);\n                });\n            });\n            req.on('error', (err) => {\n                this._throttleLog(() => {\n                    this._warning('HTTP request error', {\n                        error  : err,\n                        extra  : extraErrorData,\n                        report : encodeAndTruncate(reportRequest),\n                    });\n                });\n                done(err, null);\n            });\n\n            req.setHeader('Host', this._host);\n            req.setHeader('User-Agent', 'LightStep-JavaScript-Node');\n            req.setHeader('LightStep-Access-Token', auth.getAccessToken());\n            req.setHeader('Content-Type', 'application/json');\n            req.setHeader('Content-Length', payload.length);\n            if (useGzip) {\n                req.setHeader('Content-Encoding', 'gzip');\n            }\n            if (!detached) {\n                req.setHeader('Connection', 'keep-alive');\n            }\n            req.write(payload);\n            req.end();\n        });\n    }\n\n    _throttleLog(f) {\n        let now = Date.now();\n        if (now - this._lastLogMs < kMaxDetailedErrorFrequencyMs) {\n            return;\n        }\n        this._lastLogMs = now;\n        f();\n    }\n\n    _warning(msg, payload) {\n        this._logger.warn(msg, payload);\n    }\n\n    _error(msg, payload) {\n        this._logger.error(msg, payload);\n    }\n}\n"]}