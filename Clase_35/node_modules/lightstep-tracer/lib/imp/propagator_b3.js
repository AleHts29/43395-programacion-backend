'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propagator_ls = require('./propagator_ls');

var _propagator_ls2 = _interopRequireDefault(_propagator_ls);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CARRIER_B3_TRACER_STATE_PREFIX = 'x-b3-';

var B3Propagator = function (_LightStepPropagator) {
    _inherits(B3Propagator, _LightStepPropagator);

    function B3Propagator(tracer) {
        _classCallCheck(this, B3Propagator);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(B3Propagator).call(this, tracer));

        _this._carrierPrefix = CARRIER_B3_TRACER_STATE_PREFIX;
        return _this;
    }

    _createClass(B3Propagator, [{
        key: 'inject',
        value: function inject(spanContext, carrier) {
            var _this2 = this;

            if (!carrier) {
                this._tracer._error('Unexpected null carrier in call to inject');
                return;
            }
            if ((typeof carrier === 'undefined' ? 'undefined' : _typeof(carrier)) !== 'object') {
                this._tracer._error('Unexpected \'' + (typeof carrier === 'undefined' ? 'undefined' : _typeof(carrier)) + '\' FORMAT_TEXT_MAP carrier in call to inject');
                return;
            }

            var traceId = spanContext.traceGUID();
            if (traceId.length === 32 && traceId.substr(0, 16) === '0000000000000000') {
                traceId = traceId.substr(16); // take least significant 8 bytes (16 chars)
            }

            carrier[this._carrierPrefix + 'spanid'] = spanContext._guid;
            carrier[this._carrierPrefix + 'traceid'] = traceId;
            if (spanContext._sampled) {
                carrier[this._carrierPrefix + 'sampled'] = '1';
            } else {
                carrier[this._carrierPrefix + 'sampled'] = '0';
            }
            spanContext.forEachBaggageItem(function (key, value) {
                carrier['' + _this2._baggagePrefix + key] = value;
            });
            return carrier;
        }
    }]);

    return B3Propagator;
}(_propagator_ls2.default);

exports.default = B3Propagator;
module.exports = exports.default;

//# sourceMappingURL=propagator_b3.js.map