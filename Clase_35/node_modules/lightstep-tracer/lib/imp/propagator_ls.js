'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _each2 = require('../_each');

var _each3 = _interopRequireDefault(_each2);

var _span_context_imp = require('./span_context_imp');

var _span_context_imp2 = _interopRequireDefault(_span_context_imp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CARRIER_TRACER_STATE_PREFIX = 'ot-tracer-';
var CARRIER_BAGGAGE_PREFIX = 'ot-baggage-';

var LightStepPropagator = function () {
    function LightStepPropagator(tracer) {
        _classCallCheck(this, LightStepPropagator);

        this._tracer = tracer;
        this._carrierPrefix = CARRIER_TRACER_STATE_PREFIX;
        this._baggagePrefix = CARRIER_BAGGAGE_PREFIX;
    }

    _createClass(LightStepPropagator, [{
        key: 'inject',
        value: function inject(spanContext, carrier) {
            var _this = this;

            if (!carrier) {
                this._tracer._error('Unexpected null carrier in call to inject');
                return;
            }
            if ((typeof carrier === 'undefined' ? 'undefined' : _typeof(carrier)) !== 'object') {
                this._tracer._error('Unexpected \'' + (typeof carrier === 'undefined' ? 'undefined' : _typeof(carrier)) + '\' FORMAT_TEXT_MAP carrier in call to inject');
                return;
            }

            carrier[this._carrierPrefix + 'spanid'] = spanContext._guid;
            carrier[this._carrierPrefix + 'traceid'] = spanContext._traceGUID;
            carrier[this._carrierPrefix + 'sampled'] = 'true';
            spanContext.forEachBaggageItem(function (key, value) {
                carrier['' + _this._baggagePrefix + key] = value;
            });
            return carrier;
        }
    }, {
        key: 'extract',
        value: function extract(carrier) {
            var _this2 = this;

            // Iterate over the contents of the carrier and set the properties
            // accordingly.
            var foundFields = 0;
            var spanGUID = null;
            var traceGUID = null;
            var sampled = true;

            (0, _each3.default)(carrier, function (value, key) {
                key = key.toLowerCase();
                if (key.substr(0, _this2._carrierPrefix.length) !== _this2._carrierPrefix) {
                    return;
                }
                var suffix = key.substr(_this2._carrierPrefix.length);

                switch (suffix) {
                    case 'traceid':
                        foundFields++;
                        traceGUID = value;
                        break;
                    case 'spanid':
                        foundFields++;
                        spanGUID = value;
                        break;
                    case 'sampled':
                        switch (value) {
                            case 0:
                            case '0':
                            case false:
                            case 'false':
                                sampled = false;
                                break;
                            default:
                                sampled = true;
                                break;
                        }
                        break;
                    default:
                        _this2._tracer._error('Unrecognized carrier key \'' + key + '\' with recognized prefix. Ignoring.');
                        break;
                }
            });

            if (foundFields === 0) {
                // This is not an error per se, there was simply no SpanContext
                // in the carrier.
                return null;
            }
            if (foundFields < 2) {
                // A partial SpanContext suggests some sort of data corruption.
                this._tracer._error('Only found a partial SpanContext: ' + carrier);
                return null;
            }

            var spanContext = new _span_context_imp2.default(spanGUID, traceGUID, sampled);

            (0, _each3.default)(carrier, function (value, key) {
                key = key.toLowerCase();
                if (key.substr(0, _this2._baggagePrefix.length) !== _this2._baggagePrefix) {
                    return;
                }
                var suffix = key.substr(_this2._baggagePrefix.length);
                spanContext.setBaggageItem(suffix, value);
            });
            return spanContext;
        }
    }]);

    return LightStepPropagator;
}();

exports.default = LightStepPropagator;
module.exports = exports.default;

//# sourceMappingURL=propagator_ls.js.map