{"version":3,"sources":["../../src/imp/propagator_ls.js"],"names":[],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;;;;;AAEA,IAAM,8BAA8B,YAApC;AACA,IAAM,yBAAyB,aAA/B;;IAEqB,mB;AACjB,aADiB,mBACjB,CAAY,MAAZ,EAAoB;AAAA,8BADH,mBACG;;AAChB,aAAK,OAAL,GAAe,MAAf;AACA,aAAK,cAAL,GAAsB,2BAAtB;AACA,aAAK,cAAL,GAAsB,sBAAtB;AACH;;iBALgB,mB;;+BAOV,W,EAAa,O,EAAS;AAAA;;AACzB,gBAAI,CAAC,OAAL,EAAc;AACV,qBAAK,OAAL,CAAa,MAAb,CAAoB,2CAApB;AACA;AACH;AACD,gBAAI,QAAO,OAAP,yCAAO,OAAP,OAAmB,QAAvB,EAAiC;AAC7B,qBAAK,OAAL,CAAa,MAAb,2BAA0C,OAA1C,yCAA0C,OAA1C;AACA;AACH;;AAED,oBAAW,KAAK,cAAhB,eAA0C,YAAY,KAAtD;AACA,oBAAW,KAAK,cAAhB,gBAA2C,YAAY,UAAvD;AACA,oBAAW,KAAK,cAAhB,gBAA2C,MAA3C;AACA,wBAAY,kBAAZ,CAA+B,UAAC,GAAD,EAAM,KAAN,EAAgB;AAC3C,6BAAW,MAAK,cAAhB,GAAiC,GAAjC,IAA0C,KAA1C;AACH,aAFD;AAGA,mBAAO,OAAP;AACH;;;gCAEO,O,EAAS;AAAA;;AACb;AACA;AACA,gBAAI,cAAc,CAAlB;AACA,gBAAI,WAAW,IAAf;AACA,gBAAI,YAAY,IAAhB;AACA,gBAAI,UAAU,IAAd;;AAEA,gCAAM,OAAN,EAAe,UAAC,KAAD,EAAQ,GAAR,EAAgB;AAC3B,sBAAM,IAAI,WAAJ,EAAN;AACA,oBAAI,IAAI,MAAJ,CAAW,CAAX,EAAc,OAAK,cAAL,CAAoB,MAAlC,MAA8C,OAAK,cAAvD,EAAuE;AACnE;AACH;AACD,oBAAI,SAAS,IAAI,MAAJ,CAAW,OAAK,cAAL,CAAoB,MAA/B,CAAb;;AAEA,wBAAQ,MAAR;AACA,yBAAK,SAAL;AACI;AACA,oCAAY,KAAZ;AACA;AACJ,yBAAK,QAAL;AACI;AACA,mCAAW,KAAX;AACA;AACJ,yBAAK,SAAL;AACI,gCAAQ,KAAR;AACA,iCAAK,CAAL;AACA,iCAAK,GAAL;AACA,iCAAK,KAAL;AACA,iCAAK,OAAL;AACI,0CAAU,KAAV;AACA;AACJ;AACI,0CAAU,IAAV;AACA;AATJ;AAWA;AACJ;AACI,+BAAK,OAAL,CAAa,MAAb,iCAAiD,GAAjD;AACA;AAxBJ;AA0BH,aAjCD;;AAmCA,gBAAI,gBAAgB,CAApB,EAAuB;AACnB;AACA;AACA,uBAAO,IAAP;AACH;AACD,gBAAI,cAAc,CAAlB,EAAqB;AACjB;AACA,qBAAK,OAAL,CAAa,MAAb,wCAAyD,OAAzD;AACA,uBAAO,IAAP;AACH;;AAED,gBAAI,cAAc,+BAAmB,QAAnB,EAA6B,SAA7B,EAAwC,OAAxC,CAAlB;;AAEA,gCAAM,OAAN,EAAe,UAAC,KAAD,EAAQ,GAAR,EAAgB;AAC3B,sBAAM,IAAI,WAAJ,EAAN;AACA,oBAAI,IAAI,MAAJ,CAAW,CAAX,EAAc,OAAK,cAAL,CAAoB,MAAlC,MAA8C,OAAK,cAAvD,EAAuE;AACnE;AACH;AACD,oBAAI,SAAS,IAAI,MAAJ,CAAW,OAAK,cAAL,CAAoB,MAA/B,CAAb;AACA,4BAAY,cAAZ,CAA2B,MAA3B,EAAmC,KAAnC;AACH,aAPD;AAQA,mBAAO,WAAP;AACH;;;WA3FgB,mB;;;kBAAA,mB","file":"propagator_ls.js","sourcesContent":["import _each from '../_each';\nimport SpanContextImp from './span_context_imp';\n\nconst CARRIER_TRACER_STATE_PREFIX = 'ot-tracer-';\nconst CARRIER_BAGGAGE_PREFIX = 'ot-baggage-';\n\nexport default class LightStepPropagator {\n    constructor(tracer) {\n        this._tracer = tracer;\n        this._carrierPrefix = CARRIER_TRACER_STATE_PREFIX;\n        this._baggagePrefix = CARRIER_BAGGAGE_PREFIX;\n    }\n\n    inject(spanContext, carrier) {\n        if (!carrier) {\n            this._tracer._error('Unexpected null carrier in call to inject');\n            return;\n        }\n        if (typeof carrier !== 'object') {\n            this._tracer._error(`Unexpected '${typeof carrier}' FORMAT_TEXT_MAP carrier in call to inject`);\n            return;\n        }\n\n        carrier[`${this._carrierPrefix}spanid`] = spanContext._guid;\n        carrier[`${this._carrierPrefix}traceid`] = spanContext._traceGUID;\n        carrier[`${this._carrierPrefix}sampled`] = 'true';\n        spanContext.forEachBaggageItem((key, value) => {\n            carrier[`${this._baggagePrefix}${key}`] = value;\n        });\n        return carrier;\n    }\n\n    extract(carrier) {\n        // Iterate over the contents of the carrier and set the properties\n        // accordingly.\n        let foundFields = 0;\n        let spanGUID = null;\n        let traceGUID = null;\n        let sampled = true;\n\n        _each(carrier, (value, key) => {\n            key = key.toLowerCase();\n            if (key.substr(0, this._carrierPrefix.length) !== this._carrierPrefix) {\n                return;\n            }\n            let suffix = key.substr(this._carrierPrefix.length);\n\n            switch (suffix) {\n            case 'traceid':\n                foundFields++;\n                traceGUID = value;\n                break;\n            case 'spanid':\n                foundFields++;\n                spanGUID = value;\n                break;\n            case 'sampled':\n                switch (value) {\n                case 0:\n                case '0':\n                case false:\n                case 'false':\n                    sampled = false;\n                    break;\n                default:\n                    sampled = true;\n                    break;\n                }\n                break;\n            default:\n                this._tracer._error(`Unrecognized carrier key '${key}' with recognized prefix. Ignoring.`);\n                break;\n            }\n        });\n\n        if (foundFields === 0) {\n            // This is not an error per se, there was simply no SpanContext\n            // in the carrier.\n            return null;\n        }\n        if (foundFields < 2) {\n            // A partial SpanContext suggests some sort of data corruption.\n            this._tracer._error(`Only found a partial SpanContext: ${carrier}`);\n            return null;\n        }\n\n        let spanContext = new SpanContextImp(spanGUID, traceGUID, sampled);\n\n        _each(carrier, (value, key) => {\n            key = key.toLowerCase();\n            if (key.substr(0, this._baggagePrefix.length) !== this._baggagePrefix) {\n                return;\n            }\n            let suffix = key.substr(this._baggagePrefix.length);\n            spanContext.setBaggageItem(suffix, value);\n        });\n        return spanContext;\n    }\n}\n"]}