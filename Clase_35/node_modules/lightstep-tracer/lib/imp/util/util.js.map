{"version":3,"sources":["../../../src/imp/util/util.js"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAM,YAAY,QAAQ,SAAR,CAAlB;;IAEM,I;aAAA,I;8BAAA,I;;;iBAAA,I;;;AACF;AACA;wCACgB,Q,EAAU,K,EAAO;AAC7B,gBAAI,QAAQ,WAAW,QAAX,EAAqB,KAArB,CAAZ;AACA,gBAAI,MAAM,KAAV,EAAiB;AACb,sBAAM,KAAN;AACH;AACD,mBAAO,KAAP;AACH;;;2CAEkB,I,EAAM,I,EAAM;AAC3B,gBAAI,iBAAiB,KAAK,oBAAL,KAA8B,IAA9B,IAAsC,KAAK,sBAAL,MAAiC,IAA5F;AACA,mBAAO,cAAP;AACH;;AAED;AACA;;;;iCACS,S,EAAW;AAChB,gBAAI,OAAO,OAAO,MAAd,KAAyB,UAA7B,EAAyC;AACrC,uBAAO,UAAU,QAAV,CAAmB,SAAnB,CAAP;AACH;;AAED;AACA,mBAAO,OAAO,MAAP,QAAmB,SAAnB,EAAgC,QAAhC,CAAyC,EAAzC,CAAP;AACH;;;WAzBC,I;;;kBA4BS,IAAI,IAAJ,E","file":"util.js","sourcesContent":["const converter = require('hex2dec');\n\nclass Util {\n    // Similar to a regular setTimeout() call, but dereferences the timer so the\n    // program execution will not be held up by this timer.\n    detachedTimeout(callback, delay) {\n        let timer = setTimeout(callback, delay);\n        if (timer.unref) {\n            timer.unref();\n        }\n        return timer;\n    }\n\n    shouldSendMetaSpan(opts, tags) {\n        let shouldSendSpan = opts.meta_event_reporting === true && tags['lightstep.meta_event'] !== true;\n        return shouldSendSpan;\n    }\n\n    // Use native BigInt if available. Native BigInt has a significant\n    // performance improvement over hex2dec\n    hexToDec(hexString) {\n        if (typeof global.BigInt !== 'function') {\n            return converter.hexToDec(hexString);\n        }\n\n        // eslint-ignore-line\n        return global.BigInt(`0x${hexString}`).toString(10);\n    }\n}\n\nexport default new Util();\n"]}