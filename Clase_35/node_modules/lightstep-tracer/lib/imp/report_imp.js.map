{"version":3,"sources":["../../src/imp/report_imp.js"],"names":[],"mappings":"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","file":"report_imp.js","sourcesContent":["import { crouton_thrift } from '../platform_abstraction_layer'; // eslint-disable-line camelcase\nimport _each from '../_each'; // eslint-disable-line camelcase\nimport * as coerce from './coerce';\n\nlet proto = require('./generated_proto/collector_pb');\n\nexport default class ReportImp {\n    constructor(runtime, oldestMicros, youngestMicros, spanRecords, internalLogs, counters, timestampOffsetMicros) {\n        this._runtime = runtime;\n        this._oldestMicros = oldestMicros;\n        this._youngestMicros = youngestMicros;\n        this._spanRecords = spanRecords;\n        this._internalLogs = internalLogs;\n        this._counters = counters;\n        this._timestampOffsetMicros = timestampOffsetMicros;\n    }\n\n    getSpanRecords() {\n        return this._spanRecords;\n    }\n\n    getInternalLogs() {\n        return this._internalLogs;\n    }\n\n    getCounters() {\n        return this._counters;\n    }\n\n    toThrift() {\n        _each(this._spanRecords, (span) => {\n            span.runtime_guid = this._runtimeGUID;\n        });\n\n        let thriftCounters = [];\n        _each(this._counters, (value, key) => {\n            if (value === 0) {\n                return;\n            }\n            thriftCounters.push(new crouton_thrift.MetricsSample({\n                name         : coerce.toString(key),\n                double_value : coerce.toNumber(value),\n            }));\n        });\n\n        let thriftSpanRecords = [];\n        _each(this._spanRecords, (spanRecord) => {\n            thriftSpanRecords.push(spanRecord._toThrift());\n        });\n\n        return new crouton_thrift.ReportRequest({\n            runtime          : this._runtime.toThrift(),\n            oldest_micros    : this._oldestMicros,\n            youngest_micros  : this._youngestMicros,\n            span_records     : thriftSpanRecords,\n            internal_logs    : this._internalLogs,\n            internal_metrics : new crouton_thrift.Metrics({\n                counts : thriftCounters,\n            }),\n            timestamp_offset_micros : this._timestampOffsetMicros,\n        });\n    }\n\n    toProto(auth) {\n        let spansList = [];\n        _each(this._spanRecords, (spanRecord) => {\n            spansList.push(spanRecord._toProto());\n        });\n\n        let countsList = [];\n        _each(this._counters, (count) => {\n            let metricSample = new proto.MetricsSample();\n            metricSample.setName(count.name);\n            metricSample.setIntValue(count.int64_value);\n            metricSample.setDoubleValue(count.double_value);\n            countsList.push(metricSample);\n        });\n\n        let internalMetrics = new proto.InternalMetrics();\n        internalMetrics.setCountsList(countsList);\n\n        let reportProto = new proto.ReportRequest();\n        reportProto.setAuth(auth.toProto());\n        reportProto.setReporter(this._runtime.toProto());\n        reportProto.setSpansList(spansList);\n        reportProto.setTimestampOffsetMicros(this._timestampOffsetMicros.toString(10));\n        reportProto.setInternalMetrics(internalMetrics);\n        return reportProto;\n    }\n}\n"]}