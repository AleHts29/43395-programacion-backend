{"version":3,"sources":["../../src/imp/span_context_imp.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;;;IAEqB,c;iBAAA,c;;;AACjB;AACA;AACA;;uCAEe,G,EAAK,K,EAAO;AACvB,iBAAK,QAAL,CAAc,GAAd,IAAqB,KAArB;AACH;;;uCAEc,G,EAAK;AAChB,mBAAO,KAAK,QAAL,CAAc,GAAd,CAAP;AACH;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;2CACmB,C,EAAG;AAClB,gCAAM,KAAK,QAAX,EAAqB,UAAC,GAAD,EAAM,GAAN,EAAc;AAC/B,kBAAE,GAAF,EAAO,GAAP;AACH,aAFD;AAGH;;AAED;;;;oCACY;AACR,wBAAU,KAAK,eAAf,GAAiC,KAAK,UAAtC;AACH;;AAED;AACA;AACA;;;;AAEA,aApCiB,cAoCjB,CAAY,QAAZ,EAAsB,SAAtB,EAAiC,OAAjC,EAA0C;AAAA,8BApCzB,cAoCyB;;AACtC,aAAK,QAAL,GAAgB,EAAhB;AACA,aAAK,KAAL,GAAa,QAAb;AACA,aAAK,QAAL,GAAgB,IAAhB;AACA;AACA,YAAI,YAAY,KAAhB,EAAuB;AACnB,iBAAK,QAAL,GAAgB,OAAhB;AACH;AACD;AACA;AACA,aAAK,eAAL,GAAuB,kBAAvB;AACA,aAAK,UAAL,GAAkB,SAAlB;AACA,YAAI,KAAK,UAAL,IAAmB,KAAK,UAAL,CAAgB,MAAhB,KAA2B,EAAlD,EAAsD;AAClD,iBAAK,eAAL,GAAuB,UAAU,MAAV,CAAiB,CAAjB,EAAoB,EAApB,CAAvB;AACA,iBAAK,UAAL,GAAkB,UAAU,MAAV,CAAiB,EAAjB,CAAlB;AACH;AACJ;;WApDgB,c;;;kBAAA,c","file":"span_context_imp.js","sourcesContent":["import _each from '../_each';\n\nexport default class SpanContextImp {\n    // ---------------------------------------------------------------------- //\n    // OpenTracing Implementation\n    // ---------------------------------------------------------------------- //\n\n    setBaggageItem(key, value) {\n        this._baggage[key] = value;\n    }\n\n    getBaggageItem(key) {\n        return this._baggage[key];\n    }\n\n    // ---------------------------------------------------------------------- //\n    // LightStep Extensions\n    // ---------------------------------------------------------------------- //\n\n    // This is part of the formal OT API in Go; and will likely be supported\n    // across platforms.\n    //\n    // https://github.com/opentracing/opentracing.github.io/issues/103\n    forEachBaggageItem(f) {\n        _each(this._baggage, (val, key) => {\n            f(key, val);\n        });\n    }\n\n    // traceGUID returns a 128 bit trace ID.\n    traceGUID() {\n        return `${this._upperTraceGUID}${this._traceGUID}`;\n    }\n\n    // ---------------------------------------------------------------------- //\n    // Private methods\n    // ---------------------------------------------------------------------- //\n\n    constructor(spanGUID, traceGUID, sampled) {\n        this._baggage = {};\n        this._guid = spanGUID;\n        this._sampled = true;\n        // Ignore undefined or null when determining truthiness.\n        if (sampled === false) {\n            this._sampled = sampled;\n        }\n        // upperTraceGUID is the most significant 8 bytes of a B3/TraceContext\n        // 16 byte trace ID. Represented in base16.\n        this._upperTraceGUID = '0000000000000000';\n        this._traceGUID = traceGUID;\n        if (this._traceGUID && this._traceGUID.length === 32) {\n            this._upperTraceGUID = traceGUID.substr(0, 16);\n            this._traceGUID = traceGUID.substr(16);\n        }\n    }\n}\n"]}