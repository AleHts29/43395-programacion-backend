{"version":3,"sources":["../../src/imp/propagator_b3.js"],"names":[],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;AAEA,IAAM,iCAAiC,OAAvC;;IAEqB,Y;cAAA,Y;;AACjB,aADiB,YACjB,CAAY,MAAZ,EAAoB;AAAA,8BADH,YACG;;AAAA,2EADH,YACG,aACV,MADU;;AAEhB,cAAK,cAAL,GAAsB,8BAAtB;AAFgB;AAGnB;;iBAJgB,Y;;+BAMV,W,EAAa,O,EAAS;AAAA;;AACzB,gBAAI,CAAC,OAAL,EAAc;AACV,qBAAK,OAAL,CAAa,MAAb,CAAoB,2CAApB;AACA;AACH;AACD,gBAAI,QAAO,OAAP,yCAAO,OAAP,OAAmB,QAAvB,EAAiC;AAC7B,qBAAK,OAAL,CAAa,MAAb,2BAA0C,OAA1C,yCAA0C,OAA1C;AACA;AACH;;AAED,gBAAI,UAAU,YAAY,SAAZ,EAAd;AACA,gBAAI,QAAQ,MAAR,KAAmB,EAAnB,IAAyB,QAAQ,MAAR,CAAe,CAAf,EAAkB,EAAlB,MAA0B,kBAAvD,EAA2E;AACvE,0BAAU,QAAQ,MAAR,CAAe,EAAf,CAAV,CADuE,CACzC;AACjC;;AAED,oBAAW,KAAK,cAAhB,eAA0C,YAAY,KAAtD;AACA,oBAAW,KAAK,cAAhB,gBAA2C,OAA3C;AACA,gBAAI,YAAY,QAAhB,EAA0B;AACtB,wBAAW,KAAK,cAAhB,gBAA2C,GAA3C;AACH,aAFD,MAEO;AACH,wBAAW,KAAK,cAAhB,gBAA2C,GAA3C;AACH;AACD,wBAAY,kBAAZ,CAA+B,UAAC,GAAD,EAAM,KAAN,EAAgB;AAC3C,6BAAW,OAAK,cAAhB,GAAiC,GAAjC,IAA0C,KAA1C;AACH,aAFD;AAGA,mBAAO,OAAP;AACH;;;WAhCgB,Y;;;kBAAA,Y","file":"propagator_b3.js","sourcesContent":["import LightStepPropagator from './propagator_ls';\n\nconst CARRIER_B3_TRACER_STATE_PREFIX = 'x-b3-';\n\nexport default class B3Propagator extends LightStepPropagator {\n    constructor(tracer) {\n        super(tracer);\n        this._carrierPrefix = CARRIER_B3_TRACER_STATE_PREFIX;\n    }\n\n    inject(spanContext, carrier) {\n        if (!carrier) {\n            this._tracer._error('Unexpected null carrier in call to inject');\n            return;\n        }\n        if (typeof carrier !== 'object') {\n            this._tracer._error(`Unexpected '${typeof carrier}' FORMAT_TEXT_MAP carrier in call to inject`);\n            return;\n        }\n\n        let traceId = spanContext.traceGUID();\n        if (traceId.length === 32 && traceId.substr(0, 16) === '0000000000000000') {\n            traceId = traceId.substr(16); // take least significant 8 bytes (16 chars)\n        }\n\n        carrier[`${this._carrierPrefix}spanid`] = spanContext._guid;\n        carrier[`${this._carrierPrefix}traceid`] = traceId;\n        if (spanContext._sampled) {\n            carrier[`${this._carrierPrefix}sampled`] = '1';\n        } else {\n            carrier[`${this._carrierPrefix}sampled`] = '0';\n        }\n        spanContext.forEachBaggageItem((key, value) => {\n            carrier[`${this._baggagePrefix}${key}`] = value;\n        });\n        return carrier;\n    }\n}\n"]}