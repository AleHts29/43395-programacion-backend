{"version":3,"sources":["../../src/imp/log_builder.js"],"names":[],"mappings":";;qjBAAA;;;AACA;;;;AAEA,IAAM,YAAY,QAAQ,cAAR,CAAlB;AACA,IAAM,SAAY,QAAQ,UAAR,CAAlB;;AAEA;AACA;;IACM,U;AACF,aADE,UACF,CAAY,OAAZ,EAAqB;AAAA,8BADnB,UACmB;;AACjB,aAAK,QAAL,GAAgB,OAAhB;AACA,aAAK,OAAL,GAAe,IAAI,2CAAe,SAAnB,CAA6B;AACxC,8BAAmB,QAAQ,SAAR,CAAkB,SAAlB,EADqB;AAExC,0BAAmB,IAFqB;AAGxC,uBAAmB,IAHqB;AAIxC,yBAAmB,IAJqB;AAKxC,qBAAmB,IALqB;AAMxC,mBAAmB,IANqB;AAOxC,uBAAmB,IAPqB;AAQxC,sBAAmB,IARqB;AASxC,yBAAmB,IATqB;AAUxC,0BAAmB,IAVqB;AAWxC,0BAAmB,IAXqB;AAYxC,wBAAmB;AAZqB,SAA7B,CAAf;AAcH;;iBAjBC,U;;iCAmBO;AACL,mBAAO,KAAK,OAAZ;AACH;;;8BAEK;AACF,iBAAK,QAAL,CAAc,aAAd,CAA4B,KAAK,OAAjC;AACH;;;kCAES,M,EAAQ;AACd,iBAAK,OAAL,CAAa,gBAAb,GAAgC,OAAO,QAAP,CAAgB,MAAhB,CAAhC;AACA,mBAAO,IAAP;AACH;;;gCAEO,G,EAAK;AACT,iBAAK,OAAL,CAAa,OAAb,GAAuB,OAAO,QAAP,CAAgB,GAAhB,CAAvB;AACA,mBAAO,IAAP;AACH;;;8BAEK,G,EAAK;AACP,iBAAK,OAAL,CAAa,KAAb,GAAqB,UAAU,mBAAV,CAA8B,GAA9B,KAAsC,IAA3D;AACA,gBAAI,OAAO,UAAU,SAArB,EAAgC;AAC5B,qBAAK,KAAL,CAAW,IAAX;AACH;AACD,mBAAO,IAAP;AACH;;;6BAEI,I,EAAM;AACP,gBAAI,SAAS,SAAb,EAAwB;AACpB,qBAAK,OAAL,CAAa,SAAb,GAAyB,OAAO,QAAP,CAAgB,IAAhB,CAAzB;AACH;AACD,mBAAO,IAAP;AACH;;;6BAEI,U,EAAY;AACb,iBAAK,OAAL,CAAa,WAAb,GAA2B,OAAO,QAAP,CAAgB,UAAhB,CAA3B;AACA,mBAAO,IAAP;AACH;;;8BAEK,I,EAAM;AACR,iBAAK,OAAL,CAAa,UAAb,GAA0B,OAAO,SAAP,CAAiB,IAAjB,CAA1B;AACA,mBAAO,IAAP;AACH;;;gCAEO,I,EAAM;AACV,gBAAI,SAAS,SAAb,EAAwB;AACpB,qBAAK,OAAL,CAAa,YAAb,GAA4B,KAAK,cAAL,CAAoB,IAApB,CAA5B;AACH;AACD,mBAAO,IAAP;AACH;;;uCAEc,I,EAAM;AACjB,gBAAI,cAAc,IAAlB;AACA,gBAAI;AACA,8BAAc,KAAK,SAAL,CAAe,IAAf,CAAd;AACH,aAFD,CAEE,OAAO,QAAP,EAAiB;AACf;AACA;AACA,uBAAO,SAAP;AACH;AACD,mBAAO,WAAP;AACH;;;WA/EC,U;;;AAkFN,OAAO,OAAP,GAAiB,UAAjB","file":"log_builder.js","sourcesContent":["// eslint-disable-next-line camelcase\nimport { crouton_thrift } from '../platform_abstraction_layer';\n\nconst constants = require('../constants');\nconst coerce    = require('./coerce');\n\n// Facade on the thrift log data structure to make constructing log records more\n// convenient.\nclass LogBuilder {\n    constructor(runtime) {\n        this._runtime = runtime;\n        this._record = new crouton_thrift.LogRecord({\n            timestamp_micros : runtime._platform.nowMicros(),\n            runtime_guid     : null,\n            span_guid        : null,\n            stable_name      : null,\n            message          : null,\n            level            : null,\n            thread_id        : null,\n            filename         : null,\n            line_number      : null,\n            stack_frames     : null,\n            payload_json     : null,\n            error_flag       : null,\n        });\n    }\n\n    record() {\n        return this._record;\n    }\n\n    end() {\n        this._runtime._addLogRecord(this._record);\n    }\n\n    timestamp(micros) {\n        this._record.timestamp_micros = coerce.toNumber(micros);\n        return this;\n    }\n\n    message(msg) {\n        this._record.message = coerce.toString(msg);\n        return this;\n    }\n\n    level(num) {\n        this._record.level = constants.LOG_LEVEL_TO_STRING[num] || null;\n        if (num >= constants.LOG_ERROR) {\n            this.error(true);\n        }\n        return this;\n    }\n\n    span(guid) {\n        if (guid !== undefined) {\n            this._record.span_guid = coerce.toString(guid);\n        }\n        return this;\n    }\n\n    name(stableName) {\n        this._record.stable_name = coerce.toString(stableName);\n        return this;\n    }\n\n    error(flag) {\n        this._record.error_flag = coerce.toBoolean(flag);\n        return this;\n    }\n\n    payload(data) {\n        if (data !== undefined) {\n            this._record.payload_json = this._encodePayload(data);\n        }\n        return this;\n    }\n\n    _encodePayload(data) {\n        let payloadJSON = null;\n        try {\n            payloadJSON = JSON.stringify(data);\n        } catch (_ignored) {\n            // TODO: this should log an internal warning that a payload could\n            // not be encoded as JSON.\n            return undefined;\n        }\n        return payloadJSON;\n    }\n}\n\nmodule.exports = LogBuilder;\n"]}