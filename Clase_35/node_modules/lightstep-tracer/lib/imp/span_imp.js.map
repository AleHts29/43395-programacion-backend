{"version":3,"sources":["../../src/imp/span_imp.js"],"names":[],"mappings":"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","file":"span_imp.js","sourcesContent":["import * as opentracing from 'opentracing';\nimport * as coerce from './coerce';\nimport * as constants from '../constants';\nimport _each from '../_each';\nimport { crouton_thrift } from '../platform_abstraction_layer'; // eslint-disable-line camelcase\nimport LogRecordImp from './log_record_imp'; // eslint-disable-line camelcase\nimport util from './util/util';\n\nlet googleProtobufTimestampPB = require('google-protobuf/google/protobuf/timestamp_pb');\nlet proto = require('./generated_proto/collector_pb');\n\nexport default class SpanImp extends opentracing.Span {\n    // ---------------------------------------------------------------------- //\n    // opentracing.Span SPI\n    // ---------------------------------------------------------------------- //\n\n    _tracer() {\n        return this._tracerImp;\n    }\n\n    _context() {\n        return this._ctx;\n    }\n\n    _setOperationName(name) {\n        this._operationName = `${name}`;\n    }\n\n    _setBaggageItem(key, value) {\n        this._ctx.setBaggageItem(key, value);\n    }\n\n    _getBaggageItem(key) {\n        return this._ctx.getBaggageItem(key);\n    }\n\n    _addTags(keyValuePairs) {\n        let self = this;\n        _each(keyValuePairs, (value, key) => {\n            self._tags[key] = value;\n        });\n    }\n\n    _log(keyValuePairs, timestamp) {\n        let self = this;\n        const argumentType = typeof keyValuePairs;\n        if (argumentType !== 'object') {\n            self._tracerImp._error('Span.log() expects an object as its first argument');\n            return;\n        }\n\n        let tsMicros = timestamp\n            ? (timestamp * 1000)\n            : self._tracerImp._platform.nowMicros();\n\n        let record = new LogRecordImp(\n            self._tracerImp.getLogFieldKeyHardLimit(),\n            self._tracerImp.getLogFieldValueHardLimit(),\n            tsMicros,\n            keyValuePairs,\n        );\n        self._log_records = self._log_records || [];\n        self._log_records.push(record);\n        self._tracerImp.emit('log_added', record);\n    }\n\n    _finish(finishTime) {\n        return this.end(finishTime);\n    }\n\n    // ---------------------------------------------------------------------- //\n    // Private methods\n    // ---------------------------------------------------------------------- //\n\n    constructor(tracer, name, spanContext) {\n        super();\n\n        console.assert(typeof tracer === 'object', 'Invalid runtime'); // eslint-disable-line no-console\n\n        this._tracerImp = tracer;\n        this._ctx = spanContext;\n        this._ended  = false;\n\n        this._operationName = name;\n        this._tags          = {};\n        this._beginMicros   = tracer._platform.nowMicros();\n        this._endMicros     = 0;\n        this._errorFlag     = false;\n        this._log_records   = null;\n    }\n\n    // ---------------------------------------------------------------------- //\n    // LightStep Extensions\n    // ---------------------------------------------------------------------- //\n\n    getOperationName() {\n        return this._operationName;\n    }\n\n    // Getter only. The GUID is immutable once set internally.\n    guid() {\n        return this._ctx._guid;\n    }\n\n    traceGUID() {\n        return this._ctx._traceGUID;\n    }\n\n    parentGUID() {\n        return this._tags.parent_span_guid;\n    }\n\n    setParentGUID(guid) {\n        this._tags.parent_span_guid = coerce.toString(guid);\n        return this;\n    }\n\n    beginMicros() {\n        return this._beginMicros;\n    }\n\n    setBeginMicros(micros) {\n        this._beginMicros = micros;\n        return this;\n    }\n\n    endMicros() {\n        return this._endMicros;\n    }\n\n    setEndMicros(micros) {\n        this._endMicros = micros;\n        return this;\n    }\n\n    /**\n     * Returns a URL to the trace containing this span.\n     *\n     * Unlike most methods, it *is* safe to call this method after `finish()`.\n     *\n     * @return {string} the absolute URL for the span\n     */\n    generateTraceURL() {\n        let micros;\n        if (this._beginMicros > 0 && this._endMicros > 0) {\n            micros = Math.floor((this._beginMicros + this._endMicros) / 2);\n        } else {\n            micros = this._tracerImp._platform.nowMicros();\n        }\n\n        let urlPrefix = constants.LIGHTSTEP_APP_URL_PREFIX;\n        let accessToken = encodeURIComponent(this._tracerImp.options().access_token);\n        let guid = encodeURIComponent(this.guid());\n        return `${urlPrefix}/${accessToken}/trace?span_guid=${guid}&at_micros=${micros}`;\n    }\n\n    getTags() {\n        return this._tags;\n    }\n\n    /**\n     * Finishes the span.\n     *\n     * @param  {Number} finishTime\n     *         Optional Unix timestamp in milliseconds setting an explicit\n     *         finish time for the span.\n     */\n    end(finishTime) {\n        // Ensure a single span is not recorded multiple times\n        if (this._ended) {\n            return;\n        }\n        this._ended = true;\n\n        if (finishTime !== undefined) {\n            this.setEndMicros(Math.floor(finishTime * 1000));\n        }\n\n        // Do not set endMicros if it has already been set. This accounts for\n        // the case of a span that has had it's times set manually (i.e. allows\n        // for retroactively created spans that might not be possible to create\n        // in real-time).\n        if (this._endMicros === 0) {\n            this.setEndMicros(this._tracerImp._platform.nowMicros());\n        }\n\n        if (util.shouldSendMetaSpan(this._tracer().options(), this.getTags())) {\n            this._tracerImp.startSpan(constants.LS_META_SP_FINISH, {\n                tags : {\n                    [constants.LS_META_EVENT_KEY] : true,\n                    [constants.LS_META_TRACE_KEY] : this.traceGUID(),\n                    [constants.LS_META_SPAN_KEY]  : this.guid(),\n                },\n            }).finish();\n        }\n\n        this._tracerImp._addSpanRecord(this);\n    }\n\n    _toThrift() {\n        let attributes = [];\n        _each(this._tags, (value, key) => {\n            attributes.push(new crouton_thrift.KeyValue({\n                Key   : coerce.toString(key),\n                Value : coerce.toString(value),\n            }));\n        });\n\n        let logs = [];\n        _each(this._log_records, (logRecord) => {\n            let logThrift = logRecord.toThrift();\n            this._tracerImp._counters['logs.keys.over_limit'] += logRecord.getNumKeysOverLimit();\n            this._tracerImp._counters['logs.values.over_limit'] += logRecord.getNumValuesOverLimit();\n            logs.push(logThrift);\n        });\n\n        return new crouton_thrift.SpanRecord({\n            span_guid       : this.guid(),\n            trace_guid      : this.traceGUID(),\n            runtime_guid    : this._tracerImp.guid(),\n            span_name       : this._operationName,\n            oldest_micros   : this._beginMicros,\n            youngest_micros : this._endMicros,\n            attributes      : attributes,\n            error_flag      : this._errorFlag,\n            log_records     : logs,\n        });\n    }\n\n    _toProto() {\n        let spanContextProto = new proto.SpanContext();\n\n        spanContextProto.setTraceId(util.hexToDec(this.traceGUID()));\n        spanContextProto.setSpanId(util.hexToDec(this.guid()));\n\n        let spanProto = new proto.Span();\n        spanProto.setSpanContext(spanContextProto);\n        spanProto.setOperationName(this._operationName);\n\n        let startTimestamp = new googleProtobufTimestampPB.Timestamp();\n        let startSeconds = Math.floor(this._beginMicros / 1000000);\n        let startNanos = (this._beginMicros % 1000000) * 1000;\n        startTimestamp.setSeconds(startSeconds);\n        startTimestamp.setNanos(startNanos);\n        spanProto.setStartTimestamp(startTimestamp);\n        spanProto.setDurationMicros((this._endMicros - this._beginMicros).toString());\n\n        let logs = [];\n        _each(this._log_records, (logRecord) => {\n            let logProto = logRecord.toProto();\n            this._tracerImp._counters['logs.keys.over_limit'] += logRecord.getNumKeysOverLimit();\n            this._tracerImp._counters['logs.values.over_limit'] += logRecord.getNumValuesOverLimit();\n            logs.push(logProto);\n        });\n        spanProto.setLogsList(logs);\n\n        let parentSpanGUID;\n        let tags = [];\n        _each(this._tags, (value, key) => {\n            let strValue = coerce.toString(value);\n            let strKey = coerce.toString(key);\n            let tag = new proto.KeyValue();\n            if (strKey === 'parent_span_guid') {\n                parentSpanGUID = strValue;\n            }\n            tag.setKey(strKey);\n            tag.setStringValue(strValue);\n            tags.push(tag);\n        });\n        spanProto.setTagsList(tags);\n\n        if (parentSpanGUID !== undefined) {\n            let ref = new proto.Reference();\n            ref.setRelationship(proto.Reference.Relationship.CHILD_OF);\n            let parentSpanContext = new proto.SpanContext();\n            parentSpanContext.setSpanId(util.hexToDec(parentSpanGUID));\n            ref.setSpanContext(parentSpanContext);\n            spanProto.setReferencesList([ref]);\n        }\n\n        return spanProto;\n    }\n}\n"]}