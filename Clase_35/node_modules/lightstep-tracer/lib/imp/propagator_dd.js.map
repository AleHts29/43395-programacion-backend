{"version":3,"sources":["../../src/imp/propagator_dd.js"],"names":[],"mappings":"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","file":"propagator_dd.js","sourcesContent":["import _each from '../_each';\nimport SpanContextImp from './span_context_imp';\nimport CARRIER_BAGGAGE_PREFIX from './propagator_ls';\n\nconst CARRIER_DD_TRACER_STATE_PREFIX = 'x-datadog-';\n\nexport default class DDPropagator {\n    constructor(tracer) {\n        this._tracer = tracer;\n        this._baggagePrefix = CARRIER_BAGGAGE_PREFIX;\n        this._carrierPrefix = CARRIER_DD_TRACER_STATE_PREFIX;\n    }\n\n    inject(spanContext, carrier) {\n        if (!carrier) {\n            this._tracer._error('Unexpected null carrier in call to inject');\n            return;\n        }\n        if (typeof carrier !== 'object') {\n            this._tracer._error(`Unexpected '${typeof carrier}' FORMAT_TEXT_MAP carrier in call to inject`);\n            return;\n        }\n\n        // eslint-disable-next-line max-len\n        // Per https://github.com/lightstep/lightstep-tracer-javascript/blob/master/src/imp/platform/node/platform_node.js#L91\n        // all generated GUIDs are base 16 strings.\n        // DD headers expect integers, not base 16 values.\n        carrier[`${this._carrierPrefix}parent-id`] = parseInt(spanContext._guid, 16).toString();\n        carrier[`${this._carrierPrefix}trace-id`] = parseInt(spanContext.traceGUID(), 16).toString();\n        if (spanContext._sampled) {\n            carrier[`${this._carrierPrefix}sampling-priority`] = '1';\n        } else {\n            carrier[`${this._carrierPrefix}sampling-priority`] = '0';\n        }\n\n        spanContext.forEachBaggageItem((key, value) => {\n            carrier[`${this._baggagePrefix}${key}`] = value;\n        });\n        return carrier;\n    }\n\n    extract(carrier) {\n        // Iterate over the contents of the carrier and set the properties\n        // accordingly.\n        let foundFields = 0;\n        let spanGUID = null;\n        let traceGUID = null;\n        let sampled = true;\n\n        _each(carrier, (value, key) => {\n            key = key.toLowerCase();\n            if (key.substr(0, this._carrierPrefix.length) !== this._carrierPrefix) {\n                return;\n            }\n            let suffix = key.substr(this._carrierPrefix.length);\n\n            switch (suffix) {\n            case 'trace-id':\n                foundFields++;\n                traceGUID = parseInt(value, 10).toString(16);\n                break;\n            case 'parent-id':\n                foundFields++;\n                spanGUID = parseInt(value, 10).toString(16);\n                break;\n            case 'sampling-priority':\n                // TODO: support sampling priority somehow. This is a float64 that does not\n                // necessarily represent the sampling decision\n                if (value === 0) {\n                    sampled = false;\n                }\n                break;\n            default:\n                this._tracer._error(`Unrecognized carrier key '${key}' with recognized prefix. Ignoring.`);\n                break;\n            }\n        });\n\n        if (foundFields === 0) {\n            // This is not an error per se, there was simply no SpanContext\n            // in the carrier.\n            return null;\n        }\n        if (foundFields < 2) {\n            // A partial SpanContext suggests some sort of data corruption.\n            this._tracer._error(`Only found a partial SpanContext: ${carrier}`);\n            return null;\n        }\n\n        let spanContext = new SpanContextImp(spanGUID, traceGUID, sampled);\n\n        _each(carrier, (value, key) => {\n            key = key.toLowerCase();\n            if (key.substr(0, this._baggagePrefix.length) !== this._baggagePrefix) {\n                return;\n            }\n            let suffix = key.substr(this._baggagePrefix.length);\n            spanContext.setBaggageItem(suffix, value);\n        });\n        return spanContext;\n    }\n}\n"]}